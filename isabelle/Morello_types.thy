chapter \<open>Generated by Lem from \<open>/local/scratch/tb592/dev/sail-morello/lem/morello_types.lem\<close>.\<close>

theory "Morello_types" 

imports
  Main
  "LEM.Lem_pervasives_extra"
  "Sail.Sail2_instr_kinds"
  "Sail.Sail2_values"
  "Sail.Sail2_operators_mwords"
  "Sail.Sail2_prompt_monad"
  "Sail.Sail2_prompt"
  "Sail.Sail2_string"
  "Prelude"
  "Sail.Sail2_undefined"

begin 

\<comment> \<open>\<open>Generated by Sail from morello.\<close>\<close>
\<comment> \<open>\<open>open import Pervasives_extra\<close>\<close>
\<comment> \<open>\<open>open import Sail2_instr_kinds\<close>\<close>
\<comment> \<open>\<open>open import Sail2_values\<close>\<close>
\<comment> \<open>\<open>open import Sail2_string\<close>\<close>
\<comment> \<open>\<open>open import Sail2_operators_mwords\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt_monad\<close>\<close>
\<comment> \<open>\<open>open import Prelude\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt\<close>\<close>
\<comment> \<open>\<open>open import Sail2_undefined\<close>\<close>
type_synonym 'n bits =" ( 'n::len)Word.word "

datatype regfp  =
    RFull " (string)"
  | RSlice " ((string * ii * ii))"
  | RSliceBit " ((string * ii))"
  | RField " ((string * string))"



type_synonym regfps  =" regfp list "

datatype niafp  =
    NIAFP_successor " (unit)"
  | NIAFP_concrete_address " ( 64 bits)"
  | NIAFP_indirect_address " (unit)"



type_synonym niafps  =" niafp list "

datatype diafp  =   DIAFP_none " (unit)" | DIAFP_concrete " ( 64 bits)" | DIAFP_reg " (regfp)"



















datatype signal =   LOW | HIGH



datatype exception  =
    Error_Undefined " (unit)"
  | Error_See " (string)"
  | Error_ImplementationDefined " (string)"
  | Error_ReservedEncoding " (unit)"
  | Error_ExceptionTaken " (unit)"
  | Error_Unpredictable " (unit)"
  | Error_ConstrainedUnpredictable " (unit)"
  | Error_SError " (unit)"







type_synonym Capability  =" 129 bits "

record ProcState  =
  
 ProcState_N ::" 1 bits " 

     ProcState_Z ::" 1 bits " 

     ProcState_C ::" 1 bits " 

     ProcState_V ::" 1 bits " 

     ProcState_D ::" 1 bits " 

     ProcState_A ::" 1 bits " 

     ProcState_I ::" 1 bits " 

     ProcState_F ::" 1 bits " 

     ProcState_PAN ::" 1 bits " 

     ProcState_UAO ::" 1 bits " 

     ProcState_DIT ::" 1 bits " 

     ProcState_TCO ::" 1 bits " 

     ProcState_C64 ::" 1 bits " 

     ProcState_SS ::" 1 bits " 

     ProcState_IL ::" 1 bits " 

     ProcState_EL ::" 2 bits " 

     ProcState_nRW ::" 1 bits " 

     ProcState_SP ::" 1 bits " 

     ProcState_Q ::" 1 bits " 

     ProcState_GE ::" 4 bits " 

     ProcState_SSBS ::" 1 bits " 

     ProcState_IT ::" 8 bits " 

     ProcState_J ::" 1 bits " 

     ProcState_T ::" 1 bits " 

     ProcState_E ::" 1 bits " 

     ProcState_M ::" 5 bits "  



datatype Constraint =
    Constraint_NONE
  | Constraint_UNKNOWN
  | Constraint_UNDEF
  | Constraint_UNDEFEL0
  | Constraint_NOP
  | Constraint_TRUE
  | Constraint_FALSE
  | Constraint_DISABLED
  | Constraint_UNCOND
  | Constraint_COND
  | Constraint_ADDITIONAL_DECODE
  | Constraint_WBSUPPRESS
  | Constraint_FAULT
  | Constraint_FORCE
  | Constraint_FORCENOSLCHECK



datatype Unpredictable =
    Unpredictable_WBOVERLAPLD
  | Unpredictable_WBOVERLAPST
  | Unpredictable_LDPOVERLAP
  | Unpredictable_BASEOVERLAP
  | Unpredictable_DATAOVERLAP
  | Unpredictable_DEVPAGE2
  | Unpredictable_INSTRDEVICE
  | Unpredictable_RESCPACR
  | Unpredictable_RESMAIR
  | Unpredictable_RESTEXCB
  | Unpredictable_RESPRRR
  | Unpredictable_RESDACR
  | Unpredictable_RESVTCRS
  | Unpredictable_RESTnSZ
  | Unpredictable_LARGEIPA
  | Unpredictable_ESRCONDPASS
  | Unpredictable_ILZEROIT
  | Unpredictable_ILZEROT
  | Unpredictable_BPVECTORCATCHPRI
  | Unpredictable_VCMATCHHALF
  | Unpredictable_VCMATCHDAPA
  | Unpredictable_WPMASKANDBAS
  | Unpredictable_WPBASCONTIGUOUS
  | Unpredictable_RESWPMASK
  | Unpredictable_WPMASKEDBITS
  | Unpredictable_RESBPWPCTRL
  | Unpredictable_BPNOTIMPL
  | Unpredictable_RESBPTYPE
  | Unpredictable_BPNOTCTXCMP
  | Unpredictable_BPMATCHHALF
  | Unpredictable_BPMISMATCHHALF
  | Unpredictable_RESTARTALIGNPC
  | Unpredictable_RESTARTZEROUPPERPC
  | Unpredictable_ZEROUPPER
  | Unpredictable_ERETZEROUPPERPC
  | Unpredictable_A32FORCEALIGNPC
  | Unpredictable_SMD
  | Unpredictable_AFUPDATE
  | Unpredictable_IESBinDebug
  | Unpredictable_BADPMSFCR
  | Unpredictable_LINKTRANSFEROVERLAPLD
  | Unpredictable_LINKBASEOVERLAPLD
  | Unpredictable_CLEARERRITEZERO



datatype Exception =
    Exception_Uncategorized
  | Exception_WFxTrap
  | Exception_CP15RTTrap
  | Exception_CP15RRTTrap
  | Exception_CP14RTTrap
  | Exception_CP14DTTrap
  | Exception_AdvSIMDFPAccessTrap
  | Exception_FPIDTrap
  | Exception_CP14RRTTrap
  | Exception_IllegalState
  | Exception_SupervisorCall
  | Exception_HypervisorCall
  | Exception_MonitorCall
  | Exception_SystemRegisterTrap
  | Exception_InstructionAbort
  | Exception_PCAlignment
  | Exception_DataAbort
  | Exception_SPAlignment
  | Exception_FPTrappedException
  | Exception_SError
  | Exception_Breakpoint
  | Exception_SoftwareStep
  | Exception_Watchpoint
  | Exception_SoftwareBreakpoint
  | Exception_VectorCatch
  | Exception_IRQ
  | Exception_CapabilitySysRegTrap
  | Exception_CapabilityAccess
  | Exception_FIQ



record ExceptionRecord  =
  
 ExceptionRecord_exceptype ::" Exception " 

     ExceptionRecord_syndrome ::" 25 bits " 

     ExceptionRecord_vaddress ::" 64 bits " 

     ExceptionRecord_ipavalid ::" bool " 

     ExceptionRecord_ipaddress ::" 48 bits "  



datatype ArchVersion =   ARMv8p0 | ARMv8p1 | ARMv8p2



datatype BranchType =
    BranchType_DIRCALL
  | BranchType_INDCALL
  | BranchType_ERET
  | BranchType_DBGEXIT
  | BranchType_RET
  | BranchType_DIR
  | BranchType_INDIR
  | BranchType_EXCEPTION
  | BranchType_RESET
  | BranchType_UNKNOWN



























datatype CrossTriggerIn =
    CrossTriggerIn_CrossHalt
  | CrossTriggerIn_PMUOverflow
  | CrossTriggerIn_RSVD2
  | CrossTriggerIn_RSVD3
  | CrossTriggerIn_TraceExtOut0
  | CrossTriggerIn_TraceExtOut1
  | CrossTriggerIn_TraceExtOut2
  | CrossTriggerIn_TraceExtOut3



datatype AccType =
    AccType_NORMAL
  | AccType_VEC
  | AccType_STREAM
  | AccType_VECSTREAM
  | AccType_ATOMIC
  | AccType_ATOMICRW
  | AccType_ORDERED
  | AccType_ORDEREDRW
  | AccType_ORDEREDATOMIC
  | AccType_ORDEREDATOMICRW
  | AccType_LIMITEDORDERED
  | AccType_UNPRIV
  | AccType_IFETCH
  | AccType_PTW
  | AccType_DC
  | AccType_DC_UNPRIV
  | AccType_IC
  | AccType_DCZVA
  | AccType_AT



datatype Fault =
    Fault_None
  | Fault_AccessFlag
  | Fault_Alignment
  | Fault_Background
  | Fault_Domain
  | Fault_Permission
  | Fault_Translation
  | Fault_AddressSize
  | Fault_SyncExternal
  | Fault_SyncExternalOnWalk
  | Fault_SyncParity
  | Fault_SyncParityOnWalk
  | Fault_AsyncParity
  | Fault_AsyncExternal
  | Fault_Debug
  | Fault_TLBConflict
  | Fault_HWUpdateAccessFlag
  | Fault_CapTag
  | Fault_CapSeal
  | Fault_CapBounds
  | Fault_CapPerm
  | Fault_CapPagePerm
  | Fault_Lockdown
  | Fault_Exclusive
  | Fault_ICacheMaint



record FaultRecord  =
  
 FaultRecord_statuscode ::" Fault " 

     FaultRecord_acctype ::" AccType " 

     FaultRecord_ipaddress ::" 48 bits " 

     FaultRecord_s2fs1walk ::" bool " 

     FaultRecord_write ::" bool " 

     FaultRecord_level ::" ii " 

     FaultRecord_extflag ::" 1 bits " 

     FaultRecord_secondstage ::" bool " 

     FaultRecord_domain ::" 4 bits " 

     FaultRecord_errortype ::" 2 bits " 

     FaultRecord_debugmoe ::" 4 bits "  



record FullAddress  = 
 FullAddress_address ::" 48 bits " 
 FullAddress_NS ::" 1 bits "  



datatype DeviceType =   DeviceType_GRE | DeviceType_nGRE | DeviceType_nGnRE | DeviceType_nGnRnE



record MemAttrHints  =
  
 MemAttrHints_attrs ::" 2 bits " 
 MemAttrHints_hints ::" 2 bits " 
 MemAttrHints_transient ::" bool "  



datatype MemType =   MemType_Normal | MemType_Device



record MemoryAttributes  =
  
 MemoryAttributes_memtype ::" MemType " 

     MemoryAttributes_device ::" DeviceType " 

     MemoryAttributes_inner ::" MemAttrHints " 

     MemoryAttributes_outer ::" MemAttrHints " 

     MemoryAttributes_readtagzero ::" bool " 

     MemoryAttributes_readtagfault ::" bool " 

     MemoryAttributes_readtagfaulttgen ::" 1 bits " 

     MemoryAttributes_writetagfault ::" bool " 

     MemoryAttributes_iss2writetagfault ::" bool " 

     MemoryAttributes_shareable ::" bool " 

     MemoryAttributes_outershareable ::" bool "  



record AddressDescriptor  =
  
 AddressDescriptor_fault ::" FaultRecord " 

     AddressDescriptor_memattrs ::" MemoryAttributes " 

     AddressDescriptor_paddress ::" FullAddress " 

     AddressDescriptor_vaddress ::" 64 bits "  



datatype VirtualAddressType =   VA_Bits64 | VA_Capability



record VirtualAddress  =
  
 VirtualAddress_vatype ::" VirtualAddressType " 

     VirtualAddress_base ::" 129 bits " 

     VirtualAddress_offset ::" 64 bits "  



record MPAMinfo  =
  
 MPAMinfo_mpam_ns ::" 1 bits " 
 MPAMinfo_partid ::" 16 bits " 
 MPAMinfo_pmg ::" 8 bits "  



record AccessDescriptor  =
  
 AccessDescriptor_acctype ::" AccType " 

     AccessDescriptor_mpam ::" MPAMinfo " 

     AccessDescriptor_page_table_walk ::" bool " 

     AccessDescriptor_secondstage ::" bool " 

     AccessDescriptor_s2fs1walk ::" bool " 

     AccessDescriptor_level ::" ii "  



record Permissions  =
  
 Permissions_ap ::" 3 bits " 

     Permissions_xn ::" 1 bits " 

     Permissions_xxn ::" 1 bits " 

     Permissions_pxn ::" 1 bits "  



record DescriptorUpdate  =
  
 DescriptorUpdate_AF ::" bool " 

     DescriptorUpdate_AP ::" bool " 

     DescriptorUpdate_SC ::" bool " 

     DescriptorUpdate_descaddr ::" AddressDescriptor "  



record TLBRecord  =
  
 TLBRecord_perms ::" Permissions " 

     TLBRecord_nG ::" 1 bits " 

     TLBRecord_domain ::" 4 bits " 

     TLBRecord_contiguous ::" bool " 

     TLBRecord_level ::" ii " 

     TLBRecord_blocksize ::" ii " 

     TLBRecord_descupdate ::" DescriptorUpdate " 

     TLBRecord_CnP ::" 1 bits " 

     TLBRecord_addrdesc ::" AddressDescriptor "  



datatype MBReqDomain =
    MBReqDomain_Nonshareable
  | MBReqDomain_InnerShareable
  | MBReqDomain_OuterShareable
  | MBReqDomain_FullSystem



datatype MBReqTypes =   MBReqTypes_Reads | MBReqTypes_Writes | MBReqTypes_All



datatype PrefetchHint =   Prefetch_READ | Prefetch_WRITE | Prefetch_EXEC



datatype FPExc =
    FPExc_InvalidOp
  | FPExc_DivideByZero
  | FPExc_Overflow
  | FPExc_Underflow
  | FPExc_Inexact
  | FPExc_InputDenorm



datatype FPRounding =
    FPRounding_TIEEVEN
  | FPRounding_POSINF
  | FPRounding_NEGINF
  | FPRounding_ZERO
  | FPRounding_TIEAWAY
  | FPRounding_ODD



datatype FPType =   FPType_Nonzero | FPType_Zero | FPType_Infinity | FPType_QNaN | FPType_SNaN



record TLBContext  =
  
 TLBContext_twostage ::" bool " 

     TLBContext_secondstage ::" bool " 

     TLBContext_asid ::" 16 bits " 

     TLBContext_vmid ::" 16 bits " 

     TLBContext_el ::" 2 bits " 

     TLBContext_secure ::" bool " 

     TLBContext_t_sz ::" 6 bits " 

     TLBContext_granule_size ::" ii "  



record TLBLine  =
  
 TLBLine_address ::" 64 bits " 

     TLBLine_context ::" TLBContext " 

     TLBLine_data ::" TLBRecord " 

     TLBLine_valid_name ::" bool "  





datatype CountOp =   CountOp_CLZ | CountOp_CLS | CountOp_CNT



datatype ExtendType =
    ExtendType_SXTB
  | ExtendType_SXTH
  | ExtendType_SXTW
  | ExtendType_SXTX
  | ExtendType_UXTB
  | ExtendType_UXTH
  | ExtendType_UXTW
  | ExtendType_UXTX



datatype FPMaxMinOp =   FPMaxMinOp_MAX | FPMaxMinOp_MIN | FPMaxMinOp_MAXNUM | FPMaxMinOp_MINNUM



datatype FPUnaryOp =   FPUnaryOp_ABS | FPUnaryOp_MOV | FPUnaryOp_NEG | FPUnaryOp_SQRT



datatype FPConvOp =   FPConvOp_CVT_FtoI | FPConvOp_CVT_ItoF | FPConvOp_MOV_FtoI | FPConvOp_MOV_ItoF



datatype MoveWideOp =   MoveWideOp_N | MoveWideOp_Z | MoveWideOp_K



datatype ShiftType =   ShiftType_LSL | ShiftType_LSR | ShiftType_ASR | ShiftType_ROR



datatype LogicalOp =   LogicalOp_AND | LogicalOp_EOR | LogicalOp_ORR



datatype MemOp =   MemOp_LOAD | MemOp_STORE | MemOp_PREFETCH



datatype MemAtomicOp =
    MemAtomicOp_ADD
  | MemAtomicOp_BIC
  | MemAtomicOp_EOR
  | MemAtomicOp_ORR
  | MemAtomicOp_SMAX
  | MemAtomicOp_SMIN
  | MemAtomicOp_UMAX
  | MemAtomicOp_UMIN
  | MemAtomicOp_SWP



datatype SystemHintOp =
    SystemHintOp_NOP
  | SystemHintOp_YIELD
  | SystemHintOp_WFE
  | SystemHintOp_WFI
  | SystemHintOp_SEV
  | SystemHintOp_SEVL
  | SystemHintOp_ESB
  | SystemHintOp_PSB
  | SystemHintOp_CSDB



datatype PSTATEField =
    PSTATEField_DAIFSet
  | PSTATEField_DAIFClr
  | PSTATEField_PAN
  | PSTATEField_UAO
  | PSTATEField_SSBS
  | PSTATEField_SP



datatype VBitOp =   VBitOp_VBIF | VBitOp_VBIT | VBitOp_VBSL | VBitOp_VEOR



datatype CompareOp =   CompareOp_GT | CompareOp_GE | CompareOp_EQ | CompareOp_LE | CompareOp_LT



datatype ImmediateOp =   ImmediateOp_MOVI | ImmediateOp_MVNI | ImmediateOp_ORR | ImmediateOp_BIC



datatype ReduceOp =
    ReduceOp_FMINNUM
  | ReduceOp_FMAXNUM
  | ReduceOp_FMIN
  | ReduceOp_FMAX
  | ReduceOp_FADD
  | ReduceOp_ADD





datatype InstrEnc =   A64 | A32 | T16 | T32



datatype instr_ast  =
    Instr_BLRR_C_C " (( 2 bits * 5 bits))"
  | Instr_BLRS_C_C " (( 2 bits * 5 bits))"
  | Instr_BLRS_C_C_C " (( 5 bits * 2 bits * 5 bits))"
  | Instr_BLR_C_C " (( 2 bits * 5 bits))"
  | Instr_BRR_C_C " (( 2 bits * 5 bits))"
  | Instr_BRS_C_C_C " (( 5 bits * 2 bits * 5 bits))"
  | Instr_BRS_C_C " (( 2 bits * 5 bits))"
  | Instr_BR_C_C " (( 2 bits * 5 bits))"
  | Instr_RETR_C_C " (( 2 bits * 5 bits))"
  | Instr_RETS_C_C " (( 2 bits * 5 bits))"
  | Instr_RETS_C_C_C " (( 5 bits * 2 bits * 5 bits))"
  | Instr_RET_C_C " (( 2 bits * 5 bits))"
  | Instr_BLR_CI_C " (( 7 bits * 5 bits))"
  | Instr_BR_CI_C " (( 7 bits * 5 bits))"
  | Instr_LDPBLR_C_C_C " (( 2 bits * 5 bits * 5 bits))"
  | Instr_LDPBR_C_C_C " (( 2 bits * 5 bits * 5 bits))"
  | Instr_ALDAR_C_R_C " (( 1 bits * 5 bits * 5 bits))"
  | Instr_ALDR_C_RUI_C " (( 1 bits * 9 bits * 2 bits * 5 bits * 5 bits))"
  | Instr_ALDR_C_RRB_C " (( 5 bits * 1 bits * 1 bits * 1 bits * 1 bits * 5 bits * 5 bits))"
  | Instr_ALDUR_C_RI_C " (( 2 bits * 1 bits * 9 bits * 2 bits * 5 bits * 5 bits))"
  | Instr_CASAL_C_R_C " (( 1 bits * 5 bits * 1 bits * 5 bits * 5 bits))"
  | Instr_CASA_C_R_C " (( 1 bits * 5 bits * 1 bits * 5 bits * 5 bits))"
  | Instr_CASL_C_R_C " (( 1 bits * 5 bits * 1 bits * 5 bits * 5 bits))"
  | Instr_CAS_C_R_C " (( 1 bits * 5 bits * 1 bits * 5 bits * 5 bits))"
  | Instr_LDAPR_C_R_C " (( 5 bits * 5 bits))"
  | Instr_LDAR_C_R_C " (( 1 bits * 5 bits * 5 bits))"
  | Instr_LDAXP_C_R_C " (( 1 bits * 5 bits * 5 bits * 5 bits))"
  | Instr_LDAXR_C_R_C " (( 1 bits * 5 bits * 5 bits))"
  | Instr_LDNP_C_RIB_C " (( 1 bits * 7 bits * 5 bits * 5 bits * 5 bits))"
  | Instr_LDP_CC_RIAW_C " (( 1 bits * 7 bits * 5 bits * 5 bits * 5 bits))"
  | Instr_LDP_C_RIBW_C " (( 1 bits * 7 bits * 5 bits * 5 bits * 5 bits))"
  | Instr_LDP_C_RIB_C " (( 1 bits * 7 bits * 5 bits * 5 bits * 5 bits))"
  | Instr_LDR_C_I_C " (( 17 bits * 5 bits))"
  | Instr_LDR_C_RIAW_C " (( 2 bits * 9 bits * 5 bits * 5 bits))"
  | Instr_LDR_C_RIBW_C " (( 2 bits * 9 bits * 5 bits * 5 bits))"
  | Instr_LDR_C_RUIB_C " (( 1 bits * 12 bits * 5 bits * 5 bits))"
  | Instr_LDR_C_RRB_C " (( 2 bits * 5 bits * 1 bits * 1 bits * 1 bits * 5 bits * 5 bits))"
  | Instr_LDTR_C_RIB_C " (( 2 bits * 9 bits * 5 bits * 5 bits))"
  | Instr_LDUR_C_RI_C " (( 2 bits * 9 bits * 5 bits * 5 bits))"
  | Instr_LDXP_C_R_C " (( 1 bits * 5 bits * 5 bits * 5 bits))"
  | Instr_LDXR_C_R_C " (( 1 bits * 5 bits * 5 bits))"
  | Instr_SWPAL_CC_R_C " (( 1 bits * 1 bits * 5 bits * 5 bits * 5 bits))"
  | Instr_SWPA_CC_R_C " (( 1 bits * 1 bits * 5 bits * 5 bits * 5 bits))"
  | Instr_SWPL_CC_R_C " (( 1 bits * 1 bits * 5 bits * 5 bits * 5 bits))"
  | Instr_SWP_CC_R_C " (( 1 bits * 1 bits * 5 bits * 5 bits * 5 bits))"
  | Instr_LDCT_R_R " (( 2 bits * 5 bits * 5 bits))"
  | Instr_Other " ( 32 bits)"







datatype register_value  =
    Regval_vector " ( register_value list)"
  | Regval_list " ( register_value list)"
  | Regval_option " ( register_value option)"
  | Regval_bool " (bool)"
  | Regval_int " (ii)"
  | Regval_real " (real)"
  | Regval_string " (string)"
  | Regval_ProcState " (ProcState)"
  | Regval___InstrEnc " (InstrEnc)"
  | Regval_bit " (bitU)"
  | Regval_bitvector_128_dec " ( 128 Word.word)"
  | Regval_bitvector_129_dec " ( 129 Word.word)"
  | Regval_bitvector_1_dec " ( 1 Word.word)"
  | Regval_bitvector_2_dec " ( 2 Word.word)"
  | Regval_bitvector_32_dec " ( 32 Word.word)"
  | Regval_bitvector_48_dec " ( 48 Word.word)"
  | Regval_bitvector_63_dec " ( 63 Word.word)"
  | Regval_bitvector_64_dec " ( 64 Word.word)"
  | Regval_instr_ast " (instr_ast)"
  | Regval_signal " (signal)"



record regstate  =
  
 ProcState_reg ::" string \<Rightarrow> ProcState " 

     InstrEnc_reg ::" string \<Rightarrow> InstrEnc " 

     bitvector_129_dec_reg ::" string \<Rightarrow>  129 Word.word " 

     bitvector_1_dec_reg ::" string \<Rightarrow>  1 Word.word " 

     bitvector_2_dec_reg ::" string \<Rightarrow>  2 Word.word " 

     bitvector_32_dec_reg ::" string \<Rightarrow>  32 Word.word " 

     bitvector_48_dec_reg ::" string \<Rightarrow>  48 Word.word " 

     bitvector_63_dec_reg ::" string \<Rightarrow>  63 Word.word " 

     bitvector_64_dec_reg ::" string \<Rightarrow>  64 Word.word " 

     bool_reg ::" string \<Rightarrow> bool " 

     instr_ast_reg ::" string \<Rightarrow> instr_ast " 

     int_reg ::" string \<Rightarrow> ii " 

     signal_reg ::" string \<Rightarrow> signal " 

     vector_16_inc_bitvector_32_dec_reg ::" string \<Rightarrow> ( 32 Word.word) list " 

     vector_16_inc_bitvector_64_dec_reg ::" string \<Rightarrow> ( 64 Word.word) list " 

     vector_31_inc_bitvector_32_dec_reg ::" string \<Rightarrow> ( 32 Word.word) list " 

     vector_32_inc_bitvector_128_dec_reg ::" string \<Rightarrow> ( 128 Word.word) list " 

     vector_4_inc_bitvector_32_dec_reg ::" string \<Rightarrow> ( 32 Word.word) list "  





\<comment> \<open>\<open>val ProcState_of_regval : register_value -> maybe ProcState\<close>\<close>

fun ProcState_of_regval  :: \<open> register_value \<Rightarrow>(ProcState)option \<close>  where 
     \<open> ProcState_of_regval (Regval_ProcState (v)) = ( Some v )\<close> 
  for  v  :: " ProcState "
|\<open> ProcState_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_ProcState : ProcState -> register_value\<close>\<close>

definition regval_of_ProcState  :: \<open> ProcState \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_ProcState v = ( Regval_ProcState v )\<close> 
  for  v  :: " ProcState "


\<comment> \<open>\<open>val __InstrEnc_of_regval : register_value -> maybe __InstrEnc\<close>\<close>

fun InstrEnc_of_regval  :: \<open> register_value \<Rightarrow>(InstrEnc)option \<close>  where 
     \<open> InstrEnc_of_regval (Regval___InstrEnc (v)) = ( Some v )\<close> 
  for  v  :: " InstrEnc "
|\<open> InstrEnc_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of___InstrEnc : __InstrEnc -> register_value\<close>\<close>

definition regval_of___InstrEnc  :: \<open> InstrEnc \<Rightarrow> register_value \<close>  where 
     \<open> regval_of___InstrEnc v = ( Regval___InstrEnc v )\<close> 
  for  v  :: " InstrEnc "


\<comment> \<open>\<open>val bit_of_regval : register_value -> maybe bitU\<close>\<close>

fun bit_of_regval  :: \<open> register_value \<Rightarrow>(bitU)option \<close>  where 
     \<open> bit_of_regval (Regval_bit (v)) = ( Some v )\<close> 
  for  v  :: " bitU "
|\<open> bit_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bit : bitU -> register_value\<close>\<close>

definition regval_of_bit  :: \<open> bitU \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bit v = ( Regval_bit v )\<close> 
  for  v  :: " bitU "


\<comment> \<open>\<open>val bitvector_128_dec_of_regval : register_value -> maybe (mword ty128)\<close>\<close>

fun bitvector_128_dec_of_regval  :: \<open> register_value \<Rightarrow>((128)Word.word)option \<close>  where 
     \<open> bitvector_128_dec_of_regval (Regval_bitvector_128_dec (v)) = ( Some v )\<close> 
  for  v  :: "(128)Word.word "
|\<open> bitvector_128_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_128_dec : mword ty128 -> register_value\<close>\<close>

definition regval_of_bitvector_128_dec  :: \<open>(128)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_128_dec v = ( Regval_bitvector_128_dec v )\<close> 
  for  v  :: "(128)Word.word "


\<comment> \<open>\<open>val bitvector_129_dec_of_regval : register_value -> maybe (mword ty129)\<close>\<close>

fun bitvector_129_dec_of_regval  :: \<open> register_value \<Rightarrow>((129)Word.word)option \<close>  where 
     \<open> bitvector_129_dec_of_regval (Regval_bitvector_129_dec (v)) = ( Some v )\<close> 
  for  v  :: "(129)Word.word "
|\<open> bitvector_129_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_129_dec : mword ty129 -> register_value\<close>\<close>

definition regval_of_bitvector_129_dec  :: \<open>(129)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_129_dec v = ( Regval_bitvector_129_dec v )\<close> 
  for  v  :: "(129)Word.word "


\<comment> \<open>\<open>val bitvector_1_dec_of_regval : register_value -> maybe (mword ty1)\<close>\<close>

fun bitvector_1_dec_of_regval  :: \<open> register_value \<Rightarrow>((1)Word.word)option \<close>  where 
     \<open> bitvector_1_dec_of_regval (Regval_bitvector_1_dec (v)) = ( Some v )\<close> 
  for  v  :: "(1)Word.word "
|\<open> bitvector_1_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_1_dec : mword ty1 -> register_value\<close>\<close>

definition regval_of_bitvector_1_dec  :: \<open>(1)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_1_dec v = ( Regval_bitvector_1_dec v )\<close> 
  for  v  :: "(1)Word.word "


\<comment> \<open>\<open>val bitvector_2_dec_of_regval : register_value -> maybe (mword ty2)\<close>\<close>

fun bitvector_2_dec_of_regval  :: \<open> register_value \<Rightarrow>((2)Word.word)option \<close>  where 
     \<open> bitvector_2_dec_of_regval (Regval_bitvector_2_dec (v)) = ( Some v )\<close> 
  for  v  :: "(2)Word.word "
|\<open> bitvector_2_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_2_dec : mword ty2 -> register_value\<close>\<close>

definition regval_of_bitvector_2_dec  :: \<open>(2)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_2_dec v = ( Regval_bitvector_2_dec v )\<close> 
  for  v  :: "(2)Word.word "


\<comment> \<open>\<open>val bitvector_32_dec_of_regval : register_value -> maybe (mword ty32)\<close>\<close>

fun bitvector_32_dec_of_regval  :: \<open> register_value \<Rightarrow>((32)Word.word)option \<close>  where 
     \<open> bitvector_32_dec_of_regval (Regval_bitvector_32_dec (v)) = ( Some v )\<close> 
  for  v  :: "(32)Word.word "
|\<open> bitvector_32_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_32_dec : mword ty32 -> register_value\<close>\<close>

definition regval_of_bitvector_32_dec  :: \<open>(32)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_32_dec v = ( Regval_bitvector_32_dec v )\<close> 
  for  v  :: "(32)Word.word "


\<comment> \<open>\<open>val bitvector_48_dec_of_regval : register_value -> maybe (mword ty48)\<close>\<close>

fun bitvector_48_dec_of_regval  :: \<open> register_value \<Rightarrow>((48)Word.word)option \<close>  where 
     \<open> bitvector_48_dec_of_regval (Regval_bitvector_48_dec (v)) = ( Some v )\<close> 
  for  v  :: "(48)Word.word "
|\<open> bitvector_48_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_48_dec : mword ty48 -> register_value\<close>\<close>

definition regval_of_bitvector_48_dec  :: \<open>(48)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_48_dec v = ( Regval_bitvector_48_dec v )\<close> 
  for  v  :: "(48)Word.word "


\<comment> \<open>\<open>val bitvector_63_dec_of_regval : register_value -> maybe (mword ty63)\<close>\<close>

fun bitvector_63_dec_of_regval  :: \<open> register_value \<Rightarrow>((63)Word.word)option \<close>  where 
     \<open> bitvector_63_dec_of_regval (Regval_bitvector_63_dec (v)) = ( Some v )\<close> 
  for  v  :: "(63)Word.word "
|\<open> bitvector_63_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_63_dec : mword ty63 -> register_value\<close>\<close>

definition regval_of_bitvector_63_dec  :: \<open>(63)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_63_dec v = ( Regval_bitvector_63_dec v )\<close> 
  for  v  :: "(63)Word.word "


\<comment> \<open>\<open>val bitvector_64_dec_of_regval : register_value -> maybe (mword ty64)\<close>\<close>

fun bitvector_64_dec_of_regval  :: \<open> register_value \<Rightarrow>((64)Word.word)option \<close>  where 
     \<open> bitvector_64_dec_of_regval (Regval_bitvector_64_dec (v)) = ( Some v )\<close> 
  for  v  :: "(64)Word.word "
|\<open> bitvector_64_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_64_dec : mword ty64 -> register_value\<close>\<close>

definition regval_of_bitvector_64_dec  :: \<open>(64)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_64_dec v = ( Regval_bitvector_64_dec v )\<close> 
  for  v  :: "(64)Word.word "


\<comment> \<open>\<open>val instr_ast_of_regval : register_value -> maybe instr_ast\<close>\<close>

fun instr_ast_of_regval  :: \<open> register_value \<Rightarrow>(instr_ast)option \<close>  where 
     \<open> instr_ast_of_regval (Regval_instr_ast (v)) = ( Some v )\<close> 
  for  v  :: " instr_ast "
|\<open> instr_ast_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_instr_ast : instr_ast -> register_value\<close>\<close>

definition regval_of_instr_ast  :: \<open> instr_ast \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_instr_ast v = ( Regval_instr_ast v )\<close> 
  for  v  :: " instr_ast "


\<comment> \<open>\<open>val signal_of_regval : register_value -> maybe signal\<close>\<close>

fun signal_of_regval  :: \<open> register_value \<Rightarrow>(signal)option \<close>  where 
     \<open> signal_of_regval (Regval_signal (v)) = ( Some v )\<close> 
  for  v  :: " signal "
|\<open> signal_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_signal : signal -> register_value\<close>\<close>

definition regval_of_signal  :: \<open> signal \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_signal v = ( Regval_signal v )\<close> 
  for  v  :: " signal "




\<comment> \<open>\<open>val bool_of_register_value : register_value -> maybe bool\<close>\<close>
fun bool_of_register_value  :: \<open> register_value \<Rightarrow>(bool)option \<close>  where 
     \<open> bool_of_register_value (Regval_bool v) = ( Some v )\<close> 
  for  v  :: " bool "
|\<open> bool_of_register_value _ = ( None )\<close>

\<comment> \<open>\<open>val register_value_of_bool : bool -> register_value\<close>\<close>
definition register_value_of_bool  :: \<open> bool \<Rightarrow> register_value \<close>  where 
     \<open> register_value_of_bool v = ( Regval_bool v )\<close> 
  for  v  :: " bool "

\<comment> \<open>\<open>val int_of_register_value : register_value -> maybe integer\<close>\<close>
fun int_of_register_value  :: \<open> register_value \<Rightarrow>(int)option \<close>  where 
     \<open> int_of_register_value (Regval_int v) = ( Some v )\<close> 
  for  v  :: " int "
|\<open> int_of_register_value _ = ( None )\<close>

\<comment> \<open>\<open>val register_value_of_int : integer -> register_value\<close>\<close>
definition register_value_of_int  :: \<open> int \<Rightarrow> register_value \<close>  where 
     \<open> register_value_of_int v = ( Regval_int v )\<close> 
  for  v  :: " int "

\<comment> \<open>\<open>val real_of_register_value : register_value -> maybe real\<close>\<close>
fun real_of_register_value  :: \<open> register_value \<Rightarrow>(real)option \<close>  where 
     \<open> real_of_register_value (Regval_real v) = ( Some v )\<close> 
  for  v  :: " real "
|\<open> real_of_register_value _ = ( None )\<close>

\<comment> \<open>\<open>val register_value_of_real : real -> register_value\<close>\<close>
definition register_value_of_real  :: \<open> real \<Rightarrow> register_value \<close>  where 
     \<open> register_value_of_real v = ( Regval_real v )\<close> 
  for  v  :: " real "

\<comment> \<open>\<open>val string_of_register_value : register_value -> maybe string\<close>\<close>
fun string_of_register_value  :: \<open> register_value \<Rightarrow>(string)option \<close>  where 
     \<open> string_of_register_value (Regval_string v) = ( Some v )\<close> 
  for  v  :: " string "
|\<open> string_of_register_value _ = ( None )\<close>

\<comment> \<open>\<open>val register_value_of_string : string -> register_value\<close>\<close>
definition register_value_of_string  :: \<open> string \<Rightarrow> register_value \<close>  where 
     \<open> register_value_of_string v = ( Regval_string v )\<close> 
  for  v  :: " string "


definition instance_Sail2_values_Register_Value_Morello_types_register_value_dict  :: \<open>(register_value)Register_Value_class \<close>  where 
     \<open> instance_Sail2_values_Register_Value_Morello_types_register_value_dict = ((|

  bool_of_regval_method = bool_of_register_value,

  regval_of_bool_method = register_value_of_bool,

  int_of_regval_method = int_of_register_value,

  regval_of_int_method = register_value_of_int,

  real_of_regval_method = real_of_register_value,

  regval_of_real_method = register_value_of_real,

  string_of_regval_method = string_of_register_value,

  regval_of_string_method = register_value_of_string |) )\<close>

\<comment> \<open>\<open>val vector_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)\<close>\<close>
fun vector_of_regval  :: \<open>(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a list)option \<close>  where 
     \<open> vector_of_regval of_regval1 (Regval_vector v) = ( just_list (List.map of_regval1 v))\<close> 
  for  of_regval1  :: " register_value \<Rightarrow> 'a option " 
  and  v  :: "(register_value)list "
|\<open> vector_of_regval of_regval1 _ = ( None )\<close> 
  for  of_regval1  :: " register_value \<Rightarrow> 'a option "


\<comment> \<open>\<open>val regval_of_vector : forall 'a. ('a -> register_value) -> list 'a -> register_value\<close>\<close>
definition regval_of_vector  :: \<open>('a \<Rightarrow> register_value)\<Rightarrow> 'a list \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_vector regval_of1 xs = ( Regval_vector (List.map regval_of1 xs))\<close> 
  for  regval_of1  :: " 'a \<Rightarrow> register_value " 
  and  xs  :: " 'a list "


\<comment> \<open>\<open>val list_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)\<close>\<close>
fun list_of_regval  :: \<open>(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a list)option \<close>  where 
     \<open> list_of_regval of_regval1 (Regval_list v) = ( just_list (List.map of_regval1 v))\<close> 
  for  of_regval1  :: " register_value \<Rightarrow> 'a option " 
  and  v  :: "(register_value)list "
|\<open> list_of_regval of_regval1 _ = ( None )\<close> 
  for  of_regval1  :: " register_value \<Rightarrow> 'a option "


\<comment> \<open>\<open>val regval_of_list : forall 'a. ('a -> register_value) -> list 'a -> register_value\<close>\<close>
definition regval_of_list  :: \<open>('a \<Rightarrow> register_value)\<Rightarrow> 'a list \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_list regval_of1 xs = ( Regval_list (List.map regval_of1 xs))\<close> 
  for  regval_of1  :: " 'a \<Rightarrow> register_value " 
  and  xs  :: " 'a list "


\<comment> \<open>\<open>val option_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (maybe 'a)\<close>\<close>
fun option_of_regval  :: \<open>(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a option)option \<close>  where 
     \<open> option_of_regval of_regval1 (Regval_option v) = ( Some (Option.bind v of_regval1))\<close> 
  for  of_regval1  :: " register_value \<Rightarrow> 'a option " 
  and  v  :: "(register_value)option "
|\<open> option_of_regval of_regval1 _ = ( None )\<close> 
  for  of_regval1  :: " register_value \<Rightarrow> 'a option "


\<comment> \<open>\<open>val regval_of_option : forall 'a. ('a -> register_value) -> maybe 'a -> register_value\<close>\<close>
definition regval_of_option  :: \<open>('a \<Rightarrow> register_value)\<Rightarrow> 'a option \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_option regval_of1 v = ( Regval_option (map_option regval_of1 v))\<close> 
  for  regval_of1  :: " 'a \<Rightarrow> register_value " 
  and  v  :: " 'a option "



definition highest_el_aarch32_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> highest_el_aarch32_ref = ( (|
  name = (''__highest_el_aarch32''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__highest_el_aarch32''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__highest_el_aarch32'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition ThisInstrAbstract_ref  :: \<open>((regstate),(register_value),(instr_ast))register_ref \<close>  where 
     \<open> ThisInstrAbstract_ref = ( (|
  name = (''__ThisInstrAbstract''),
  read_from = ((\<lambda> s . (instr_ast_reg   s) (''__ThisInstrAbstract''))),
  write_to = ((\<lambda> v s .  (( s (| instr_ast_reg :=
  ((\<lambda> reg .  if reg = (''__ThisInstrAbstract'') then v else(instr_ast_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  instr_ast_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_instr_ast v)) |) )\<close>


definition ThisInstrEnc_ref  :: \<open>((regstate),(register_value),(InstrEnc))register_ref \<close>  where 
     \<open> ThisInstrEnc_ref = ( (|
  name = (''__ThisInstrEnc''),
  read_from = ((\<lambda> s . (InstrEnc_reg   s) (''__ThisInstrEnc''))),
  write_to = ((\<lambda> v s .  (( s (| InstrEnc_reg :=
  ((\<lambda> reg .  if reg = (''__ThisInstrEnc'') then v else(InstrEnc_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  InstrEnc_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of___InstrEnc v)) |) )\<close>


definition CNTControlBase_ref  :: \<open>((regstate),(register_value),((48)Word.word))register_ref \<close>  where 
     \<open> CNTControlBase_ref = ( (|
  name = (''__CNTControlBase''),
  read_from = ((\<lambda> s . (bitvector_48_dec_reg   s) (''__CNTControlBase''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_48_dec_reg :=
  ((\<lambda> reg .  if reg = (''__CNTControlBase'') then v else(bitvector_48_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_48_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_48_dec v)) |) )\<close>


definition EventRegister_ref  :: \<open>((regstate),(register_value),((1)Word.word))register_ref \<close>  where 
     \<open> EventRegister_ref = ( (|
  name = (''EventRegister''),
  read_from = ((\<lambda> s . (bitvector_1_dec_reg   s) (''EventRegister''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_1_dec_reg :=
  ((\<lambda> reg .  if reg = (''EventRegister'') then v else(bitvector_1_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_1_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_1_dec v)) |) )\<close>


definition saved_exception_level_ref  :: \<open>((regstate),(register_value),((2)Word.word))register_ref \<close>  where 
     \<open> saved_exception_level_ref = ( (|
  name = (''__saved_exception_level''),
  read_from = ((\<lambda> s . (bitvector_2_dec_reg   s) (''__saved_exception_level''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_2_dec_reg :=
  ((\<lambda> reg .  if reg = (''__saved_exception_level'') then v else(bitvector_2_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_2_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_2_dec v)) |) )\<close>


definition SP_EL3_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> SP_EL3_ref = ( (|
  name = (''SP_EL3''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''SP_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''SP_EL3'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition V_ref  :: \<open>((regstate),(register_value),(((128)Word.word)list))register_ref \<close>  where 
     \<open> V_ref = ( (|
  name = (''_V''),
  read_from = ((\<lambda> s . (vector_32_inc_bitvector_128_dec_reg   s) (''_V''))),
  write_to = ((\<lambda> v s .  (( s (| vector_32_inc_bitvector_128_dec_reg :=
  ((\<lambda> reg .  if reg = (''_V'') then v else(vector_32_inc_bitvector_128_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_128_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_128_dec v)) v)) |) )\<close>


definition PMSWINC_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMSWINC_EL0_ref = ( (|
  name = (''PMSWINC_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMSWINC_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSWINC_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition OSLAR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> OSLAR_EL1_ref = ( (|
  name = (''OSLAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''OSLAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSLAR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_SGI1R_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_SGI1R_EL1_ref = ( (|
  name = (''ICC_SGI1R_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_SGI1R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SGI1R_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_SGI0R_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_SGI0R_EL1_ref = ( (|
  name = (''ICC_SGI0R_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_SGI0R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SGI0R_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_EOIR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_EOIR1_EL1_ref = ( (|
  name = (''ICV_EOIR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_EOIR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_EOIR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_EOIR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_EOIR1_EL1_ref = ( (|
  name = (''ICC_EOIR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_EOIR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_EOIR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_EOIR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_EOIR0_EL1_ref = ( (|
  name = (''ICV_EOIR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_EOIR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_EOIR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_EOIR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_EOIR0_EL1_ref = ( (|
  name = (''ICC_EOIR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_EOIR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_EOIR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_DIR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_DIR_EL1_ref = ( (|
  name = (''ICV_DIR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_DIR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_DIR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_DIR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_DIR_EL1_ref = ( (|
  name = (''ICC_DIR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_DIR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_DIR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_ASGI1R_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_ASGI1R_EL1_ref = ( (|
  name = (''ICC_ASGI1R_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_ASGI1R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_ASGI1R_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGDTRTX_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGDTRTX_EL0_ref = ( (|
  name = (''DBGDTRTX_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGDTRTX_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGDTRTX_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition RDDC_EL0_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> RDDC_EL0_ref = ( (|
  name = (''RDDC_EL0''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''RDDC_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''RDDC_EL0'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition DDC_EL3_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> DDC_EL3_ref = ( (|
  name = (''DDC_EL3''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''DDC_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''DDC_EL3'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition DDC_EL2_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> DDC_EL2_ref = ( (|
  name = (''DDC_EL2''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''DDC_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''DDC_EL2'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition DDC_EL1_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> DDC_EL1_ref = ( (|
  name = (''DDC_EL1''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''DDC_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''DDC_EL1'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition DDC_EL0_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> DDC_EL0_ref = ( (|
  name = (''DDC_EL0''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''DDC_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''DDC_EL0'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition VTTBR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VTTBR_EL2_ref = ( (|
  name = (''VTTBR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VTTBR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VTTBR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VTCR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> VTCR_EL2_ref = ( (|
  name = (''VTCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''VTCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''VTCR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition VSESR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> VSESR_EL2_ref = ( (|
  name = (''VSESR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''VSESR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''VSESR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition TTBR1_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR1_EL2_ref = ( (|
  name = (''TTBR1_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR1_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR1_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR1_EL1_ref = ( (|
  name = (''TTBR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBR0_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR0_EL3_ref = ( (|
  name = (''TTBR0_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR0_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR0_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBR0_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR0_EL2_ref = ( (|
  name = (''TTBR0_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR0_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR0_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR0_EL1_ref = ( (|
  name = (''TTBR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TPIDR_EL3_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> TPIDR_EL3_ref = ( (|
  name = (''TPIDR_EL3''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''TPIDR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDR_EL3'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition TPIDR_EL2_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> TPIDR_EL2_ref = ( (|
  name = (''TPIDR_EL2''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''TPIDR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDR_EL2'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition TPIDR_EL1_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> TPIDR_EL1_ref = ( (|
  name = (''TPIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''TPIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDR_EL1'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition TPIDR_EL0_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> TPIDR_EL0_ref = ( (|
  name = (''TPIDR_EL0''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''TPIDR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDR_EL0'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition TPIDRRO_EL0_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> TPIDRRO_EL0_ref = ( (|
  name = (''TPIDRRO_EL0''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''TPIDRRO_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDRRO_EL0'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition SP_EL2_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> SP_EL2_ref = ( (|
  name = (''SP_EL2''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''SP_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''SP_EL2'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition SP_EL1_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> SP_EL1_ref = ( (|
  name = (''SP_EL1''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''SP_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''SP_EL1'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition SP_EL0_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> SP_EL0_ref = ( (|
  name = (''SP_EL0''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''SP_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''SP_EL0'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition SPSR_und_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SPSR_und_ref = ( (|
  name = (''SPSR_und''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SPSR_und''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_und'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SPSR_irq_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SPSR_irq_ref = ( (|
  name = (''SPSR_irq''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SPSR_irq''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_irq'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SPSR_fiq_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SPSR_fiq_ref = ( (|
  name = (''SPSR_fiq''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SPSR_fiq''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_fiq'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SPSR_abt_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SPSR_abt_ref = ( (|
  name = (''SPSR_abt''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SPSR_abt''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_abt'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SDER32_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SDER32_EL3_ref = ( (|
  name = (''SDER32_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SDER32_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SDER32_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SCXTNUM_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCXTNUM_EL3_ref = ( (|
  name = (''SCXTNUM_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCXTNUM_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCXTNUM_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCXTNUM_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCXTNUM_EL2_ref = ( (|
  name = (''SCXTNUM_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCXTNUM_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCXTNUM_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCXTNUM_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCXTNUM_EL1_ref = ( (|
  name = (''SCXTNUM_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCXTNUM_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCXTNUM_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CID_EL0_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> CID_EL0_ref = ( (|
  name = (''CID_EL0''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''CID_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''CID_EL0'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition S3_op1_Cn_Cm_op2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> S3_op1_Cn_Cm_op2_ref = ( (|
  name = (''S3_op1_Cn_Cm_op2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''S3_op1_Cn_Cm_op2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''S3_op1_Cn_Cm_op2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RVBAR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RVBAR_EL3_ref = ( (|
  name = (''RVBAR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RVBAR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RVBAR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RVBAR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RVBAR_EL2_ref = ( (|
  name = (''RVBAR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RVBAR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RVBAR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RVBAR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RVBAR_EL1_ref = ( (|
  name = (''RVBAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RVBAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RVBAR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RTPIDR_EL0_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> RTPIDR_EL0_ref = ( (|
  name = (''RTPIDR_EL0''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''RTPIDR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''RTPIDR_EL0'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition RSP_EL0_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> RSP_EL0_ref = ( (|
  name = (''RSP_EL0''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''RSP_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''RSP_EL0'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition RMR_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> RMR_EL3_ref = ( (|
  name = (''RMR_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''RMR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''RMR_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition RMR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> RMR_EL2_ref = ( (|
  name = (''RMR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''RMR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''RMR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition RMR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> RMR_EL1_ref = ( (|
  name = (''RMR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''RMR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''RMR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition REVIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> REVIDR_EL1_ref = ( (|
  name = (''REVIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''REVIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''REVIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMXEVTYPER_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMXEVTYPER_EL0_ref = ( (|
  name = (''PMXEVTYPER_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMXEVTYPER_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMXEVTYPER_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMXEVCNTR_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMXEVCNTR_EL0_ref = ( (|
  name = (''PMXEVCNTR_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMXEVCNTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMXEVCNTR_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMSLATFR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMSLATFR_EL1_ref = ( (|
  name = (''PMSLATFR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMSLATFR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSLATFR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMSIRR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMSIRR_EL1_ref = ( (|
  name = (''PMSIRR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMSIRR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSIRR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMSIDR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMSIDR_EL1_ref = ( (|
  name = (''PMSIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMSIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSIDR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMSICR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSICR_EL1_ref = ( (|
  name = (''PMSICR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSICR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSICR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSFCR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMSFCR_EL1_ref = ( (|
  name = (''PMSFCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMSFCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSFCR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMSEVFR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSEVFR_EL1_ref = ( (|
  name = (''PMSEVFR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSEVFR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSEVFR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSELR_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMSELR_EL0_ref = ( (|
  name = (''PMSELR_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMSELR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSELR_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMSCR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMSCR_EL2_ref = ( (|
  name = (''PMSCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMSCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSCR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMSCR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMSCR_EL1_ref = ( (|
  name = (''PMSCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMSCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSCR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMOVSSET_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMOVSSET_EL0_ref = ( (|
  name = (''PMOVSSET_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMOVSSET_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMOVSSET_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMOVSCLR_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMOVSCLR_EL0_ref = ( (|
  name = (''PMOVSCLR_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMOVSCLR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMOVSCLR_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMINTENSET_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMINTENSET_EL1_ref = ( (|
  name = (''PMINTENSET_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMINTENSET_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMINTENSET_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMINTENCLR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMINTENCLR_EL1_ref = ( (|
  name = (''PMINTENCLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMINTENCLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMINTENCLR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMEVTYPER_EL0_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> PMEVTYPER_EL0_ref = ( (|
  name = (''PMEVTYPER_EL0''),
  read_from = ((\<lambda> s . (vector_31_inc_bitvector_32_dec_reg   s) (''PMEVTYPER_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| vector_31_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMEVTYPER_EL0'') then v else(vector_31_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition PMEVCNTR_EL0_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> PMEVCNTR_EL0_ref = ( (|
  name = (''PMEVCNTR_EL0''),
  read_from = ((\<lambda> s . (vector_31_inc_bitvector_32_dec_reg   s) (''PMEVCNTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| vector_31_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMEVCNTR_EL0'') then v else(vector_31_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition PMCR_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMCR_EL0_ref = ( (|
  name = (''PMCR_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMCR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCR_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMCNTENSET_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMCNTENSET_EL0_ref = ( (|
  name = (''PMCNTENSET_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMCNTENSET_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCNTENSET_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMCNTENCLR_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMCNTENCLR_EL0_ref = ( (|
  name = (''PMCNTENCLR_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMCNTENCLR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCNTENCLR_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMCEID1_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMCEID1_EL0_ref = ( (|
  name = (''PMCEID1_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMCEID1_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCEID1_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMCEID0_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMCEID0_EL0_ref = ( (|
  name = (''PMCEID0_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMCEID0_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCEID0_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMCCNTR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMCCNTR_EL0_ref = ( (|
  name = (''PMCCNTR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMCCNTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCCNTR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMUSERENR_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMUSERENR_EL0_ref = ( (|
  name = (''PMUSERENR_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMUSERENR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMUSERENR_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMCCFILTR_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMCCFILTR_EL0_ref = ( (|
  name = (''PMCCFILTR_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMCCFILTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCCFILTR_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMBSR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMBSR_EL1_ref = ( (|
  name = (''PMBSR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMBSR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMBSR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMBPTR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMBPTR_EL1_ref = ( (|
  name = (''PMBPTR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMBPTR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMBPTR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMBLIMITR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMBLIMITR_EL1_ref = ( (|
  name = (''PMBLIMITR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMBLIMITR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMBLIMITR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMBIDR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMBIDR_EL1_ref = ( (|
  name = (''PMBIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMBIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMBIDR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PAR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PAR_EL1_ref = ( (|
  name = (''PAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PAR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition OSECCR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> OSECCR_EL1_ref = ( (|
  name = (''OSECCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''OSECCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSECCR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition OSDTRTX_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> OSDTRTX_EL1_ref = ( (|
  name = (''OSDTRTX_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''OSDTRTX_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSDTRTX_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition OSDTRRX_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> OSDTRRX_EL1_ref = ( (|
  name = (''OSDTRRX_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''OSDTRRX_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSDTRRX_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MVFR2_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MVFR2_EL1_ref = ( (|
  name = (''MVFR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MVFR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MVFR2_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MVFR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MVFR1_EL1_ref = ( (|
  name = (''MVFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MVFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MVFR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MVFR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MVFR0_EL1_ref = ( (|
  name = (''MVFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MVFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MVFR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition VMPIDR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VMPIDR_EL2_ref = ( (|
  name = (''VMPIDR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VMPIDR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VMPIDR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPIDR_EL1_ref = ( (|
  name = (''MPIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPMV_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MPAMVPMV_EL2_ref = ( (|
  name = (''MPAMVPMV_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MPAMVPMV_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPMV_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MPAMVPM7_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM7_EL2_ref = ( (|
  name = (''MPAMVPM7_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM7_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM7_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM6_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM6_EL2_ref = ( (|
  name = (''MPAMVPM6_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM6_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM6_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM5_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM5_EL2_ref = ( (|
  name = (''MPAMVPM5_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM5_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM5_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM4_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM4_EL2_ref = ( (|
  name = (''MPAMVPM4_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM4_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM4_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM3_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM3_EL2_ref = ( (|
  name = (''MPAMVPM3_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM3_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM3_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM2_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM2_EL2_ref = ( (|
  name = (''MPAMVPM2_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM2_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM2_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM1_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM1_EL2_ref = ( (|
  name = (''MPAMVPM1_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM1_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM1_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM0_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM0_EL2_ref = ( (|
  name = (''MPAMVPM0_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM0_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM0_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMIDR_EL1_ref = ( (|
  name = (''MPAMIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMHCR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MPAMHCR_EL2_ref = ( (|
  name = (''MPAMHCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MPAMHCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMHCR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MPAM1_EL1_0_62_ref  :: \<open>((regstate),(register_value),((63)Word.word))register_ref \<close>  where 
     \<open> MPAM1_EL1_0_62_ref = ( (|
  name = (''_MPAM1_EL1_0_62''),
  read_from = ((\<lambda> s . (bitvector_63_dec_reg   s) (''_MPAM1_EL1_0_62''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_63_dec_reg :=
  ((\<lambda> reg .  if reg = (''_MPAM1_EL1_0_62'') then v else(bitvector_63_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_63_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_63_dec v)) |) )\<close>


definition MPAM2_EL2_0_62_ref  :: \<open>((regstate),(register_value),((63)Word.word))register_ref \<close>  where 
     \<open> MPAM2_EL2_0_62_ref = ( (|
  name = (''_MPAM2_EL2_0_62''),
  read_from = ((\<lambda> s . (bitvector_63_dec_reg   s) (''_MPAM2_EL2_0_62''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_63_dec_reg :=
  ((\<lambda> reg .  if reg = (''_MPAM2_EL2_0_62'') then v else(bitvector_63_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_63_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_63_dec v)) |) )\<close>


definition MPAM3_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAM3_EL3_ref = ( (|
  name = (''MPAM3_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAM3_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAM3_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAM0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAM0_EL1_ref = ( (|
  name = (''MPAM0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAM0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAM0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VPIDR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> VPIDR_EL2_ref = ( (|
  name = (''VPIDR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''VPIDR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''VPIDR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MIDR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MIDR_EL1_ref = ( (|
  name = (''MIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MIDR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MDRAR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MDRAR_EL1_ref = ( (|
  name = (''MDRAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MDRAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDRAR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MDCCSR_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MDCCSR_EL0_ref = ( (|
  name = (''MDCCSR_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MDCCSR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDCCSR_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MDCCINT_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MDCCINT_EL1_ref = ( (|
  name = (''MDCCINT_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MDCCINT_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDCCINT_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MAIR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MAIR_EL3_ref = ( (|
  name = (''MAIR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MAIR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MAIR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MAIR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MAIR_EL2_ref = ( (|
  name = (''MAIR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MAIR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MAIR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MAIR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MAIR_EL1_ref = ( (|
  name = (''MAIR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MAIR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MAIR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition LORSA_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> LORSA_EL1_ref = ( (|
  name = (''LORSA_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''LORSA_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''LORSA_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition LORN_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> LORN_EL1_ref = ( (|
  name = (''LORN_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''LORN_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''LORN_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition LORID_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> LORID_EL1_ref = ( (|
  name = (''LORID_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''LORID_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''LORID_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition LOREA_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> LOREA_EL1_ref = ( (|
  name = (''LOREA_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''LOREA_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''LOREA_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition LORC_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> LORC_EL1_ref = ( (|
  name = (''LORC_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''LORC_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''LORC_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ISR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ISR_EL1_ref = ( (|
  name = (''ISR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ISR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ISR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition IFSR32_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> IFSR32_EL2_ref = ( (|
  name = (''IFSR32_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''IFSR32_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''IFSR32_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_PFR2_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_PFR2_EL1_ref = ( (|
  name = (''ID_PFR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_PFR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_PFR2_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_PFR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_PFR1_EL1_ref = ( (|
  name = (''ID_PFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_PFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_PFR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_PFR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_PFR0_EL1_ref = ( (|
  name = (''ID_PFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_PFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_PFR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_MMFR5_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR5_EL1_ref = ( (|
  name = (''ID_MMFR5_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_MMFR5_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR5_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_MMFR4_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR4_EL1_ref = ( (|
  name = (''ID_MMFR4_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_MMFR4_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR4_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_MMFR3_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR3_EL1_ref = ( (|
  name = (''ID_MMFR3_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_MMFR3_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR3_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_MMFR2_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR2_EL1_ref = ( (|
  name = (''ID_MMFR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_MMFR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR2_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_MMFR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR1_EL1_ref = ( (|
  name = (''ID_MMFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_MMFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_MMFR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR0_EL1_ref = ( (|
  name = (''ID_MMFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_MMFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_ISAR6_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR6_EL1_ref = ( (|
  name = (''ID_ISAR6_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_ISAR6_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR6_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_ISAR5_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR5_EL1_ref = ( (|
  name = (''ID_ISAR5_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_ISAR5_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR5_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_ISAR4_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR4_EL1_ref = ( (|
  name = (''ID_ISAR4_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_ISAR4_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR4_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_ISAR3_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR3_EL1_ref = ( (|
  name = (''ID_ISAR3_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_ISAR3_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR3_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_ISAR2_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR2_EL1_ref = ( (|
  name = (''ID_ISAR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_ISAR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR2_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_ISAR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR1_EL1_ref = ( (|
  name = (''ID_ISAR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_ISAR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_ISAR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR0_EL1_ref = ( (|
  name = (''ID_ISAR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_ISAR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_DFR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_DFR0_EL1_ref = ( (|
  name = (''ID_DFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_DFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_DFR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_AFR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_AFR0_EL1_ref = ( (|
  name = (''ID_AFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_AFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AFR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_AA64ZFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64ZFR0_EL1_ref = ( (|
  name = (''ID_AA64ZFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64ZFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64ZFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64PFR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_AA64PFR1_EL1_ref = ( (|
  name = (''ID_AA64PFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_AA64PFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64PFR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_AA64PFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64PFR0_EL1_ref = ( (|
  name = (''ID_AA64PFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64PFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64PFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64MMFR2_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64MMFR2_EL1_ref = ( (|
  name = (''ID_AA64MMFR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64MMFR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64MMFR2_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64MMFR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64MMFR1_EL1_ref = ( (|
  name = (''ID_AA64MMFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64MMFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64MMFR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64MMFR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_AA64MMFR0_EL1_ref = ( (|
  name = (''ID_AA64MMFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_AA64MMFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64MMFR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_AA64ISAR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64ISAR1_EL1_ref = ( (|
  name = (''ID_AA64ISAR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64ISAR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64ISAR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64ISAR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64ISAR0_EL1_ref = ( (|
  name = (''ID_AA64ISAR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64ISAR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64ISAR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64DFR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_AA64DFR1_EL1_ref = ( (|
  name = (''ID_AA64DFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_AA64DFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64DFR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_AA64DFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64DFR0_EL1_ref = ( (|
  name = (''ID_AA64DFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64DFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64DFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64AFR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_AA64AFR1_EL1_ref = ( (|
  name = (''ID_AA64AFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_AA64AFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64AFR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ID_AA64AFR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ID_AA64AFR0_EL1_ref = ( (|
  name = (''ID_AA64AFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ID_AA64AFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64AFR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICH_VTR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICH_VTR_EL2_ref = ( (|
  name = (''ICH_VTR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICH_VTR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_VTR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICH_VMCR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICH_VMCR_EL2_ref = ( (|
  name = (''ICH_VMCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICH_VMCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_VMCR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICH_MISR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICH_MISR_EL2_ref = ( (|
  name = (''ICH_MISR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICH_MISR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_MISR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICH_LR_EL2_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> ICH_LR_EL2_ref = ( (|
  name = (''ICH_LR_EL2''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''ICH_LR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_LR_EL2'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition ICH_ELRSR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICH_ELRSR_EL2_ref = ( (|
  name = (''ICH_ELRSR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICH_ELRSR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_ELRSR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICH_EISR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICH_EISR_EL2_ref = ( (|
  name = (''ICH_EISR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICH_EISR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_EISR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICH_AP1R_EL2_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> ICH_AP1R_EL2_ref = ( (|
  name = (''ICH_AP1R_EL2''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_32_dec_reg   s) (''ICH_AP1R_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_AP1R_EL2'') then v else(vector_4_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition ICH_AP0R_EL2_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> ICH_AP0R_EL2_ref = ( (|
  name = (''ICH_AP0R_EL2''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_32_dec_reg   s) (''ICH_AP0R_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_AP0R_EL2'') then v else(vector_4_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition ICV_RPR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_RPR_EL1_ref = ( (|
  name = (''ICV_RPR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_RPR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_RPR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_RPR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_RPR_EL1_ref = ( (|
  name = (''ICC_RPR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_RPR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_RPR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_PMR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_PMR_EL1_ref = ( (|
  name = (''ICV_PMR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_PMR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_PMR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_PMR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_PMR_EL1_ref = ( (|
  name = (''ICC_PMR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_PMR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_PMR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_IGRPEN1_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_IGRPEN1_EL3_ref = ( (|
  name = (''ICC_IGRPEN1_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_IGRPEN1_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IGRPEN1_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_IGRPEN1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_IGRPEN1_EL1_ref = ( (|
  name = (''ICV_IGRPEN1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_IGRPEN1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_IGRPEN1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_IGRPEN1_EL1_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_IGRPEN1_EL1_S_ref = ( (|
  name = (''ICC_IGRPEN1_EL1_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_IGRPEN1_EL1_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IGRPEN1_EL1_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_IGRPEN1_EL1_NS_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_IGRPEN1_EL1_NS_ref = ( (|
  name = (''ICC_IGRPEN1_EL1_NS''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_IGRPEN1_EL1_NS''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IGRPEN1_EL1_NS'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_IGRPEN0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_IGRPEN0_EL1_ref = ( (|
  name = (''ICV_IGRPEN0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_IGRPEN0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_IGRPEN0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_IGRPEN0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_IGRPEN0_EL1_ref = ( (|
  name = (''ICC_IGRPEN0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_IGRPEN0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IGRPEN0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_IAR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_IAR1_EL1_ref = ( (|
  name = (''ICV_IAR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_IAR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_IAR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_IAR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_IAR1_EL1_ref = ( (|
  name = (''ICC_IAR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_IAR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IAR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_IAR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_IAR0_EL1_ref = ( (|
  name = (''ICV_IAR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_IAR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_IAR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_IAR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_IAR0_EL1_ref = ( (|
  name = (''ICC_IAR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_IAR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IAR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_HPPIR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_HPPIR1_EL1_ref = ( (|
  name = (''ICV_HPPIR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_HPPIR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_HPPIR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_HPPIR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_HPPIR1_EL1_ref = ( (|
  name = (''ICC_HPPIR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_HPPIR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_HPPIR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_HPPIR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_HPPIR0_EL1_ref = ( (|
  name = (''ICV_HPPIR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_HPPIR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_HPPIR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_HPPIR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_HPPIR0_EL1_ref = ( (|
  name = (''ICC_HPPIR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_HPPIR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_HPPIR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_CTLR_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_CTLR_EL3_ref = ( (|
  name = (''ICC_CTLR_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_CTLR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_CTLR_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_CTLR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_CTLR_EL1_ref = ( (|
  name = (''ICV_CTLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_CTLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_CTLR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_CTLR_EL1_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_CTLR_EL1_S_ref = ( (|
  name = (''ICC_CTLR_EL1_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_CTLR_EL1_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_CTLR_EL1_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_CTLR_EL1_NS_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_CTLR_EL1_NS_ref = ( (|
  name = (''ICC_CTLR_EL1_NS''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_CTLR_EL1_NS''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_CTLR_EL1_NS'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_BPR1_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_BPR1_EL1_ref = ( (|
  name = (''ICV_BPR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_BPR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_BPR1_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_BPR1_EL1_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_BPR1_EL1_S_ref = ( (|
  name = (''ICC_BPR1_EL1_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_BPR1_EL1_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_BPR1_EL1_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_BPR1_EL1_NS_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_BPR1_EL1_NS_ref = ( (|
  name = (''ICC_BPR1_EL1_NS''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_BPR1_EL1_NS''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_BPR1_EL1_NS'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_BPR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICV_BPR0_EL1_ref = ( (|
  name = (''ICV_BPR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICV_BPR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_BPR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_BPR0_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_BPR0_EL1_ref = ( (|
  name = (''ICC_BPR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_BPR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_BPR0_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICV_AP1R_EL1_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> ICV_AP1R_EL1_ref = ( (|
  name = (''ICV_AP1R_EL1''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_32_dec_reg   s) (''ICV_AP1R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_AP1R_EL1'') then v else(vector_4_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition ICC_AP1R_EL1_S_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> ICC_AP1R_EL1_S_ref = ( (|
  name = (''ICC_AP1R_EL1_S''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_32_dec_reg   s) (''ICC_AP1R_EL1_S''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_AP1R_EL1_S'') then v else(vector_4_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition ICC_AP1R_EL1_NS_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> ICC_AP1R_EL1_NS_ref = ( (|
  name = (''ICC_AP1R_EL1_NS''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_32_dec_reg   s) (''ICC_AP1R_EL1_NS''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_AP1R_EL1_NS'') then v else(vector_4_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition ICC_AP1R_EL1_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> ICC_AP1R_EL1_ref = ( (|
  name = (''ICC_AP1R_EL1''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_32_dec_reg   s) (''ICC_AP1R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_AP1R_EL1'') then v else(vector_4_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition ICV_AP0R_EL1_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> ICV_AP0R_EL1_ref = ( (|
  name = (''ICV_AP0R_EL1''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_32_dec_reg   s) (''ICV_AP0R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_AP0R_EL1'') then v else(vector_4_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition ICH_HCR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICH_HCR_EL2_ref = ( (|
  name = (''ICH_HCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICH_HCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_HCR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_SRE_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_SRE_EL3_ref = ( (|
  name = (''ICC_SRE_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_SRE_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SRE_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_SRE_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_SRE_EL2_ref = ( (|
  name = (''ICC_SRE_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_SRE_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SRE_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_SRE_EL1_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_SRE_EL1_S_ref = ( (|
  name = (''ICC_SRE_EL1_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_SRE_EL1_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SRE_EL1_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_SRE_EL1_NS_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_SRE_EL1_NS_ref = ( (|
  name = (''ICC_SRE_EL1_NS''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_SRE_EL1_NS''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SRE_EL1_NS'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_AP0R_EL1_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> ICC_AP0R_EL1_ref = ( (|
  name = (''ICC_AP0R_EL1''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_32_dec_reg   s) (''ICC_AP0R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_AP0R_EL1'') then v else(vector_4_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition HSTR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> HSTR_EL2_ref = ( (|
  name = (''HSTR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''HSTR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''HSTR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition HACR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HACR_EL2_ref = ( (|
  name = (''HACR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HACR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HACR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition FPSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> FPSR_ref = ( (|
  name = (''FPSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''FPSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''FPSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition FPEXC32_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> FPEXC32_EL2_ref = ( (|
  name = (''FPEXC32_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''FPEXC32_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''FPEXC32_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition FPCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> FPCR_ref = ( (|
  name = (''FPCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''FPCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''FPCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ERXSTATUS_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXSTATUS_EL1_ref = ( (|
  name = (''ERXSTATUS_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXSTATUS_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXSTATUS_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXMISC1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXMISC1_EL1_ref = ( (|
  name = (''ERXMISC1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXMISC1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXMISC1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXMISC0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXMISC0_EL1_ref = ( (|
  name = (''ERXMISC0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXMISC0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXMISC0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXFR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXFR_EL1_ref = ( (|
  name = (''ERXFR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXFR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXFR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXCTLR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXCTLR_EL1_ref = ( (|
  name = (''ERXCTLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXCTLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXCTLR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXADDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXADDR_EL1_ref = ( (|
  name = (''ERXADDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXADDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXADDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERRSELR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ERRSELR_EL1_ref = ( (|
  name = (''ERRSELR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ERRSELR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERRSELR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ERRIDR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ERRIDR_EL1_ref = ( (|
  name = (''ERRIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ERRIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERRIDR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition VDISR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> VDISR_EL2_ref = ( (|
  name = (''VDISR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''VDISR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''VDISR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DISR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DISR_EL1_ref = ( (|
  name = (''DISR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DISR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DISR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DCZID_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DCZID_EL0_ref = ( (|
  name = (''DCZID_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DCZID_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DCZID_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DBGWVR_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> DBGWVR_EL1_ref = ( (|
  name = (''DBGWVR_EL1''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''DBGWVR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGWVR_EL1'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition DBGWCR_EL1_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> DBGWCR_EL1_ref = ( (|
  name = (''DBGWCR_EL1''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_32_dec_reg   s) (''DBGWCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGWCR_EL1'') then v else(vector_16_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition DBGVCR32_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGVCR32_EL2_ref = ( (|
  name = (''DBGVCR32_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGVCR32_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGVCR32_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CDBGDTR_EL0_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> CDBGDTR_EL0_ref = ( (|
  name = (''CDBGDTR_EL0''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''CDBGDTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''CDBGDTR_EL0'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition MDSCR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MDSCR_EL1_ref = ( (|
  name = (''MDSCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MDSCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDSCR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DBGDTRRX_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGDTRRX_EL0_ref = ( (|
  name = (''DBGDTRRX_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGDTRRX_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGDTRRX_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DBGCLAIMSET_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGCLAIMSET_EL1_ref = ( (|
  name = (''DBGCLAIMSET_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGCLAIMSET_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGCLAIMSET_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DBGCLAIMCLR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGCLAIMCLR_EL1_ref = ( (|
  name = (''DBGCLAIMCLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGCLAIMCLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGCLAIMCLR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DBGBVR_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> DBGBVR_EL1_ref = ( (|
  name = (''DBGBVR_EL1''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''DBGBVR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGBVR_EL1'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition OSLSR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> OSLSR_EL1_ref = ( (|
  name = (''OSLSR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''OSLSR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSLSR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition OSDLR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> OSDLR_EL1_ref = ( (|
  name = (''OSDLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''OSDLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSDLR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DBGPRCR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGPRCR_EL1_ref = ( (|
  name = (''DBGPRCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGPRCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGPRCR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SPIDEN_ref  :: \<open>((regstate),(register_value),(signal))register_ref \<close>  where 
     \<open> SPIDEN_ref = ( (|
  name = (''SPIDEN''),
  read_from = ((\<lambda> s . (signal_reg   s) (''SPIDEN''))),
  write_to = ((\<lambda> v s .  (( s (| signal_reg :=
  ((\<lambda> reg .  if reg = (''SPIDEN'') then v else(signal_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  signal_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_signal v)) |) )\<close>


definition DBGEN_ref  :: \<open>((regstate),(register_value),(signal))register_ref \<close>  where 
     \<open> DBGEN_ref = ( (|
  name = (''DBGEN''),
  read_from = ((\<lambda> s . (signal_reg   s) (''DBGEN''))),
  write_to = ((\<lambda> v s .  (( s (| signal_reg :=
  ((\<lambda> reg .  if reg = (''DBGEN'') then v else(signal_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  signal_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_signal v)) |) )\<close>


definition DSPSR_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DSPSR_EL0_ref = ( (|
  name = (''DSPSR_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DSPSR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DSPSR_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CDLR_EL0_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> CDLR_EL0_ref = ( (|
  name = (''CDLR_EL0''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''CDLR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''CDLR_EL0'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition DBGBCR_EL1_ref  :: \<open>((regstate),(register_value),(((32)Word.word)list))register_ref \<close>  where 
     \<open> DBGBCR_EL1_ref = ( (|
  name = (''DBGBCR_EL1''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_32_dec_reg   s) (''DBGBCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGBCR_EL1'') then v else(vector_16_inc_bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_32_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_32_dec v)) v)) |) )\<close>


definition MDCR_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MDCR_EL3_ref = ( (|
  name = (''MDCR_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MDCR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDCR_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MDCR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MDCR_EL2_ref = ( (|
  name = (''MDCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MDCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDCR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DBGAUTHSTATUS_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGAUTHSTATUS_EL1_ref = ( (|
  name = (''DBGAUTHSTATUS_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGAUTHSTATUS_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGAUTHSTATUS_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DACR32_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DACR32_EL2_ref = ( (|
  name = (''DACR32_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DACR32_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DACR32_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTR_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTR_EL0_ref = ( (|
  name = (''CTR_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTR_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CSSELR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CSSELR_EL1_ref = ( (|
  name = (''CSSELR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CSSELR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CSSELR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CSCR_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CSCR_EL3_ref = ( (|
  name = (''CSCR_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CSCR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CSCR_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CONTEXTIDR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CONTEXTIDR_EL2_ref = ( (|
  name = (''CONTEXTIDR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CONTEXTIDR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CONTEXTIDR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CONTEXTIDR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CONTEXTIDR_EL1_ref = ( (|
  name = (''CONTEXTIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CONTEXTIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CONTEXTIDR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTV_TVAL_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTV_TVAL_EL0_ref = ( (|
  name = (''CNTV_TVAL_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTV_TVAL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTV_TVAL_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTV_CVAL_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTV_CVAL_EL0_ref = ( (|
  name = (''CNTV_CVAL_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTV_CVAL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTV_CVAL_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTV_CTL_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTV_CTL_EL0_ref = ( (|
  name = (''CNTV_CTL_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTV_CTL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTV_CTL_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTVOFF_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTVOFF_EL2_ref = ( (|
  name = (''CNTVOFF_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTVOFF_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTVOFF_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTVCT_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTVCT_EL0_ref = ( (|
  name = (''CNTVCT_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTVCT_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTVCT_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTP_TVAL_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTP_TVAL_EL0_ref = ( (|
  name = (''CNTP_TVAL_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTP_TVAL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTP_TVAL_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTP_CVAL_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTP_CVAL_EL0_ref = ( (|
  name = (''CNTP_CVAL_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTP_CVAL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTP_CVAL_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTP_CTL_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTP_CTL_EL0_ref = ( (|
  name = (''CNTP_CTL_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTP_CTL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTP_CTL_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTPS_TVAL_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTPS_TVAL_EL1_ref = ( (|
  name = (''CNTPS_TVAL_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTPS_TVAL_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTPS_TVAL_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTPS_CVAL_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTPS_CVAL_EL1_ref = ( (|
  name = (''CNTPS_CVAL_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTPS_CVAL_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTPS_CVAL_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTPS_CTL_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTPS_CTL_EL1_ref = ( (|
  name = (''CNTPS_CTL_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTPS_CTL_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTPS_CTL_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTPCT_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTPCT_EL0_ref = ( (|
  name = (''CNTPCT_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTPCT_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTPCT_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHV_TVAL_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTHV_TVAL_EL2_ref = ( (|
  name = (''CNTHV_TVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTHV_TVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHV_TVAL_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTHV_CVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHV_CVAL_EL2_ref = ( (|
  name = (''CNTHV_CVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHV_CVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHV_CVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHV_CTL_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTHV_CTL_EL2_ref = ( (|
  name = (''CNTHV_CTL_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTHV_CTL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHV_CTL_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTHP_TVAL_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTHP_TVAL_EL2_ref = ( (|
  name = (''CNTHP_TVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTHP_TVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHP_TVAL_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTHP_CVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHP_CVAL_EL2_ref = ( (|
  name = (''CNTHP_CVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHP_CVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHP_CVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHP_CTL_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTHP_CTL_EL2_ref = ( (|
  name = (''CNTHP_CTL_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTHP_CTL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHP_CTL_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTKCTL_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTKCTL_EL1_ref = ( (|
  name = (''CNTKCTL_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTKCTL_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTKCTL_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTHCTL_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTHCTL_EL2_ref = ( (|
  name = (''CNTHCTL_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTHCTL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHCTL_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTFRQ_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTFRQ_EL0_ref = ( (|
  name = (''CNTFRQ_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTFRQ_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTFRQ_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CLIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CLIDR_EL1_ref = ( (|
  name = (''CLIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CLIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CLIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CHCR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CHCR_EL2_ref = ( (|
  name = (''CHCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CHCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CHCR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CCSIDR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CCSIDR_EL1_ref = ( (|
  name = (''CCSIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CCSIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CCSIDR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMAIR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMAIR_EL3_ref = ( (|
  name = (''AMAIR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMAIR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMAIR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMAIR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMAIR_EL2_ref = ( (|
  name = (''AMAIR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMAIR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMAIR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMAIR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMAIR_EL1_ref = ( (|
  name = (''AMAIR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMAIR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMAIR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AIDR_EL1_ref = ( (|
  name = (''AIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR1_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR1_EL3_ref = ( (|
  name = (''AFSR1_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR1_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR1_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR1_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR1_EL2_ref = ( (|
  name = (''AFSR1_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR1_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR1_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR1_EL1_ref = ( (|
  name = (''AFSR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR0_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR0_EL3_ref = ( (|
  name = (''AFSR0_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR0_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR0_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR0_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR0_EL2_ref = ( (|
  name = (''AFSR0_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR0_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR0_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR0_EL1_ref = ( (|
  name = (''AFSR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ACTLR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ACTLR_EL3_ref = ( (|
  name = (''ACTLR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ACTLR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ACTLR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ACTLR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ACTLR_EL2_ref = ( (|
  name = (''ACTLR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ACTLR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ACTLR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ACTLR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ACTLR_EL1_ref = ( (|
  name = (''ACTLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ACTLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ACTLR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SPSR_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SPSR_EL3_ref = ( (|
  name = (''SPSR_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SPSR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SPSR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SPSR_EL2_ref = ( (|
  name = (''SPSR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SPSR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SPSR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SPSR_EL1_ref = ( (|
  name = (''SPSR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SPSR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SCTLR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCTLR_EL3_ref = ( (|
  name = (''SCTLR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCTLR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCTLR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCTLR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCTLR_EL2_ref = ( (|
  name = (''SCTLR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCTLR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCTLR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCTLR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCTLR_EL1_ref = ( (|
  name = (''SCTLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCTLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCTLR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition EDSCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDSCR_ref = ( (|
  name = (''EDSCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDSCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDSCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CPTR_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CPTR_EL3_ref = ( (|
  name = (''CPTR_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CPTR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CPTR_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CPTR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CPTR_EL2_ref = ( (|
  name = (''CPTR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CPTR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CPTR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CPACR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CPACR_EL1_ref = ( (|
  name = (''CPACR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CPACR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CPACR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition VBAR_EL3_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> VBAR_EL3_ref = ( (|
  name = (''VBAR_EL3''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''VBAR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''VBAR_EL3'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition VBAR_EL2_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> VBAR_EL2_ref = ( (|
  name = (''VBAR_EL2''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''VBAR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''VBAR_EL2'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition VBAR_EL1_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> VBAR_EL1_ref = ( (|
  name = (''VBAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''VBAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''VBAR_EL1'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition ELR_EL3_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> ELR_EL3_ref = ( (|
  name = (''ELR_EL3''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''ELR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''ELR_EL3'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition ELR_EL2_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> ELR_EL2_ref = ( (|
  name = (''ELR_EL2''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''ELR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''ELR_EL2'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition ELR_EL1_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> ELR_EL1_ref = ( (|
  name = (''ELR_EL1''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''ELR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''ELR_EL1'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition CCTLR_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CCTLR_EL3_ref = ( (|
  name = (''CCTLR_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CCTLR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CCTLR_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CCTLR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CCTLR_EL2_ref = ( (|
  name = (''CCTLR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CCTLR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CCTLR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CCTLR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CCTLR_EL1_ref = ( (|
  name = (''CCTLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CCTLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CCTLR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CCTLR_EL0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CCTLR_EL0_ref = ( (|
  name = (''CCTLR_EL0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CCTLR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CCTLR_EL0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition BranchTaken_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> BranchTaken_ref = ( (|
  name = (''__BranchTaken''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__BranchTaken''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__BranchTaken'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition PC_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PC_ref = ( (|
  name = (''_PC''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''_PC''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''_PC'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TCR_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> TCR_EL3_ref = ( (|
  name = (''TCR_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''TCR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''TCR_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition TCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TCR_EL2_ref = ( (|
  name = (''TCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TCR_EL1_ref = ( (|
  name = (''TCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HPFAR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HPFAR_EL2_ref = ( (|
  name = (''HPFAR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HPFAR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HPFAR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition FAR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> FAR_EL3_ref = ( (|
  name = (''FAR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''FAR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''FAR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition FAR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> FAR_EL2_ref = ( (|
  name = (''FAR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''FAR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''FAR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition FAR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> FAR_EL1_ref = ( (|
  name = (''FAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''FAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''FAR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ESR_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ESR_EL3_ref = ( (|
  name = (''ESR_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ESR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ESR_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ESR_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ESR_EL2_ref = ( (|
  name = (''ESR_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ESR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ESR_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ESR_EL1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ESR_EL1_ref = ( (|
  name = (''ESR_EL1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ESR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ESR_EL1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition R30_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R30_ref = ( (|
  name = (''_R30''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R30''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R30'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R29_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R29_ref = ( (|
  name = (''_R29''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R29''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R29'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R28_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R28_ref = ( (|
  name = (''_R28''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R28''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R28'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R27_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R27_ref = ( (|
  name = (''_R27''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R27''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R27'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R26_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R26_ref = ( (|
  name = (''_R26''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R26''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R26'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R25_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R25_ref = ( (|
  name = (''_R25''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R25''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R25'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R24_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R24_ref = ( (|
  name = (''_R24''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R24''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R24'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R23_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R23_ref = ( (|
  name = (''_R23''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R23''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R23'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R22_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R22_ref = ( (|
  name = (''_R22''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R22''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R22'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R21_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R21_ref = ( (|
  name = (''_R21''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R21''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R21'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R20_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R20_ref = ( (|
  name = (''_R20''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R20''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R20'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R19_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R19_ref = ( (|
  name = (''_R19''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R19''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R19'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R18_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R18_ref = ( (|
  name = (''_R18''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R18''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R18'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R17_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R17_ref = ( (|
  name = (''_R17''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R17''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R17'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R16_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R16_ref = ( (|
  name = (''_R16''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R16''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R16'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R15_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R15_ref = ( (|
  name = (''_R15''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R15''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R15'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R14_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R14_ref = ( (|
  name = (''_R14''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R14''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R14'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R13_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R13_ref = ( (|
  name = (''_R13''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R13''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R13'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R12_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R12_ref = ( (|
  name = (''_R12''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R12''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R12'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R11_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R11_ref = ( (|
  name = (''_R11''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R11''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R11'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R10_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R10_ref = ( (|
  name = (''_R10''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R10''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R10'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R09_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R09_ref = ( (|
  name = (''_R09''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R09''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R09'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R08_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R08_ref = ( (|
  name = (''_R08''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R08''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R08'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R07_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R07_ref = ( (|
  name = (''_R07''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R07''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R07'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R06_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R06_ref = ( (|
  name = (''_R06''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R06''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R06'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R05_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R05_ref = ( (|
  name = (''_R05''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R05''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R05'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R04_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R04_ref = ( (|
  name = (''_R04''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R04''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R04'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R03_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R03_ref = ( (|
  name = (''_R03''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R03''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R03'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R02_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R02_ref = ( (|
  name = (''_R02''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R02''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R02'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R01_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R01_ref = ( (|
  name = (''_R01''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R01''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R01'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition R00_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> R00_ref = ( (|
  name = (''_R00''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''_R00''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''_R00'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition ThisInstr_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ThisInstr_ref = ( (|
  name = (''__ThisInstr''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''__ThisInstr''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''__ThisInstr'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PSTATE_ref  :: \<open>((regstate),(register_value),(ProcState))register_ref \<close>  where 
     \<open> PSTATE_ref = ( (|
  name = (''PSTATE''),
  read_from = ((\<lambda> s . (ProcState_reg   s) (''PSTATE''))),
  write_to = ((\<lambda> v s .  (( s (| ProcState_reg :=
  ((\<lambda> reg .  if reg = (''PSTATE'') then v else(ProcState_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  ProcState_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_ProcState v)) |) )\<close>


definition HCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HCR_EL2_ref = ( (|
  name = (''HCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCR_EL3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SCR_EL3_ref = ( (|
  name = (''SCR_EL3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SCR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCR_EL3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTHVS_TVAL_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTHVS_TVAL_EL2_ref = ( (|
  name = (''CNTHVS_TVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTHVS_TVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHVS_TVAL_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTHVS_CVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHVS_CVAL_EL2_ref = ( (|
  name = (''CNTHVS_CVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHVS_CVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHVS_CVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHVS_CTL_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTHVS_CTL_EL2_ref = ( (|
  name = (''CNTHVS_CTL_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTHVS_CTL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHVS_CTL_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTHPS_TVAL_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTHPS_TVAL_EL2_ref = ( (|
  name = (''CNTHPS_TVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTHPS_TVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHPS_TVAL_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTHPS_CVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHPS_CVAL_EL2_ref = ( (|
  name = (''CNTHPS_CVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHPS_CVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHPS_CVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHPS_CTL_EL2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTHPS_CTL_EL2_ref = ( (|
  name = (''CNTHPS_CTL_EL2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTHPS_CTL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHPS_CTL_EL2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PCC_ref  :: \<open>((regstate),(register_value),((129)Word.word))register_ref \<close>  where 
     \<open> PCC_ref = ( (|
  name = (''PCC''),
  read_from = ((\<lambda> s . (bitvector_129_dec_reg   s) (''PCC''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_129_dec_reg :=
  ((\<lambda> reg .  if reg = (''PCC'') then v else(bitvector_129_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_129_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_129_dec v)) |) )\<close>


definition SEE_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> SEE_ref = ( (|
  name = (''SEE''),
  read_from = ((\<lambda> s . (int_reg   s) (''SEE''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg := ((\<lambda> reg .  if reg = (''SEE'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


\<comment> \<open>\<open>val registers : list (string * register_ops regstate register_value)\<close>\<close>
definition registers  :: \<open>(string*((register_value \<Rightarrow> bool)*(regstate \<Rightarrow> register_value)*(register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option)))list \<close>  where 
     \<open> registers = ( [
    ((''__highest_el_aarch32''), register_ops_of highest_el_aarch32_ref),
    ((''__ThisInstrAbstract''), register_ops_of ThisInstrAbstract_ref),
    ((''__ThisInstrEnc''), register_ops_of ThisInstrEnc_ref),
    ((''__CNTControlBase''), register_ops_of CNTControlBase_ref),
    ((''EventRegister''), register_ops_of EventRegister_ref),
    ((''__saved_exception_level''), register_ops_of saved_exception_level_ref),
    ((''SP_EL3''), register_ops_of SP_EL3_ref),
    ((''_V''), register_ops_of V_ref),
    ((''PMSWINC_EL0''), register_ops_of PMSWINC_EL0_ref),
    ((''OSLAR_EL1''), register_ops_of OSLAR_EL1_ref),
    ((''ICC_SGI1R_EL1''), register_ops_of ICC_SGI1R_EL1_ref),
    ((''ICC_SGI0R_EL1''), register_ops_of ICC_SGI0R_EL1_ref),
    ((''ICV_EOIR1_EL1''), register_ops_of ICV_EOIR1_EL1_ref),
    ((''ICC_EOIR1_EL1''), register_ops_of ICC_EOIR1_EL1_ref),
    ((''ICV_EOIR0_EL1''), register_ops_of ICV_EOIR0_EL1_ref),
    ((''ICC_EOIR0_EL1''), register_ops_of ICC_EOIR0_EL1_ref),
    ((''ICV_DIR_EL1''), register_ops_of ICV_DIR_EL1_ref),
    ((''ICC_DIR_EL1''), register_ops_of ICC_DIR_EL1_ref),
    ((''ICC_ASGI1R_EL1''), register_ops_of ICC_ASGI1R_EL1_ref),
    ((''DBGDTRTX_EL0''), register_ops_of DBGDTRTX_EL0_ref),
    ((''RDDC_EL0''), register_ops_of RDDC_EL0_ref),
    ((''DDC_EL3''), register_ops_of DDC_EL3_ref),
    ((''DDC_EL2''), register_ops_of DDC_EL2_ref),
    ((''DDC_EL1''), register_ops_of DDC_EL1_ref),
    ((''DDC_EL0''), register_ops_of DDC_EL0_ref),
    ((''VTTBR_EL2''), register_ops_of VTTBR_EL2_ref),
    ((''VTCR_EL2''), register_ops_of VTCR_EL2_ref),
    ((''VSESR_EL2''), register_ops_of VSESR_EL2_ref),
    ((''TTBR1_EL2''), register_ops_of TTBR1_EL2_ref),
    ((''TTBR1_EL1''), register_ops_of TTBR1_EL1_ref),
    ((''TTBR0_EL3''), register_ops_of TTBR0_EL3_ref),
    ((''TTBR0_EL2''), register_ops_of TTBR0_EL2_ref),
    ((''TTBR0_EL1''), register_ops_of TTBR0_EL1_ref),
    ((''TPIDR_EL3''), register_ops_of TPIDR_EL3_ref),
    ((''TPIDR_EL2''), register_ops_of TPIDR_EL2_ref),
    ((''TPIDR_EL1''), register_ops_of TPIDR_EL1_ref),
    ((''TPIDR_EL0''), register_ops_of TPIDR_EL0_ref),
    ((''TPIDRRO_EL0''), register_ops_of TPIDRRO_EL0_ref),
    ((''SP_EL2''), register_ops_of SP_EL2_ref),
    ((''SP_EL1''), register_ops_of SP_EL1_ref),
    ((''SP_EL0''), register_ops_of SP_EL0_ref),
    ((''SPSR_und''), register_ops_of SPSR_und_ref),
    ((''SPSR_irq''), register_ops_of SPSR_irq_ref),
    ((''SPSR_fiq''), register_ops_of SPSR_fiq_ref),
    ((''SPSR_abt''), register_ops_of SPSR_abt_ref),
    ((''SDER32_EL3''), register_ops_of SDER32_EL3_ref),
    ((''SCXTNUM_EL3''), register_ops_of SCXTNUM_EL3_ref),
    ((''SCXTNUM_EL2''), register_ops_of SCXTNUM_EL2_ref),
    ((''SCXTNUM_EL1''), register_ops_of SCXTNUM_EL1_ref),
    ((''CID_EL0''), register_ops_of CID_EL0_ref),
    ((''S3_op1_Cn_Cm_op2''), register_ops_of S3_op1_Cn_Cm_op2_ref),
    ((''RVBAR_EL3''), register_ops_of RVBAR_EL3_ref),
    ((''RVBAR_EL2''), register_ops_of RVBAR_EL2_ref),
    ((''RVBAR_EL1''), register_ops_of RVBAR_EL1_ref),
    ((''RTPIDR_EL0''), register_ops_of RTPIDR_EL0_ref),
    ((''RSP_EL0''), register_ops_of RSP_EL0_ref),
    ((''RMR_EL3''), register_ops_of RMR_EL3_ref),
    ((''RMR_EL2''), register_ops_of RMR_EL2_ref),
    ((''RMR_EL1''), register_ops_of RMR_EL1_ref),
    ((''REVIDR_EL1''), register_ops_of REVIDR_EL1_ref),
    ((''PMXEVTYPER_EL0''), register_ops_of PMXEVTYPER_EL0_ref),
    ((''PMXEVCNTR_EL0''), register_ops_of PMXEVCNTR_EL0_ref),
    ((''PMSLATFR_EL1''), register_ops_of PMSLATFR_EL1_ref),
    ((''PMSIRR_EL1''), register_ops_of PMSIRR_EL1_ref),
    ((''PMSIDR_EL1''), register_ops_of PMSIDR_EL1_ref),
    ((''PMSICR_EL1''), register_ops_of PMSICR_EL1_ref),
    ((''PMSFCR_EL1''), register_ops_of PMSFCR_EL1_ref),
    ((''PMSEVFR_EL1''), register_ops_of PMSEVFR_EL1_ref),
    ((''PMSELR_EL0''), register_ops_of PMSELR_EL0_ref),
    ((''PMSCR_EL2''), register_ops_of PMSCR_EL2_ref),
    ((''PMSCR_EL1''), register_ops_of PMSCR_EL1_ref),
    ((''PMOVSSET_EL0''), register_ops_of PMOVSSET_EL0_ref),
    ((''PMOVSCLR_EL0''), register_ops_of PMOVSCLR_EL0_ref),
    ((''PMINTENSET_EL1''), register_ops_of PMINTENSET_EL1_ref),
    ((''PMINTENCLR_EL1''), register_ops_of PMINTENCLR_EL1_ref),
    ((''PMEVTYPER_EL0''), register_ops_of PMEVTYPER_EL0_ref),
    ((''PMEVCNTR_EL0''), register_ops_of PMEVCNTR_EL0_ref),
    ((''PMCR_EL0''), register_ops_of PMCR_EL0_ref),
    ((''PMCNTENSET_EL0''), register_ops_of PMCNTENSET_EL0_ref),
    ((''PMCNTENCLR_EL0''), register_ops_of PMCNTENCLR_EL0_ref),
    ((''PMCEID1_EL0''), register_ops_of PMCEID1_EL0_ref),
    ((''PMCEID0_EL0''), register_ops_of PMCEID0_EL0_ref),
    ((''PMCCNTR_EL0''), register_ops_of PMCCNTR_EL0_ref),
    ((''PMUSERENR_EL0''), register_ops_of PMUSERENR_EL0_ref),
    ((''PMCCFILTR_EL0''), register_ops_of PMCCFILTR_EL0_ref),
    ((''PMBSR_EL1''), register_ops_of PMBSR_EL1_ref),
    ((''PMBPTR_EL1''), register_ops_of PMBPTR_EL1_ref),
    ((''PMBLIMITR_EL1''), register_ops_of PMBLIMITR_EL1_ref),
    ((''PMBIDR_EL1''), register_ops_of PMBIDR_EL1_ref),
    ((''PAR_EL1''), register_ops_of PAR_EL1_ref),
    ((''OSECCR_EL1''), register_ops_of OSECCR_EL1_ref),
    ((''OSDTRTX_EL1''), register_ops_of OSDTRTX_EL1_ref),
    ((''OSDTRRX_EL1''), register_ops_of OSDTRRX_EL1_ref),
    ((''MVFR2_EL1''), register_ops_of MVFR2_EL1_ref),
    ((''MVFR1_EL1''), register_ops_of MVFR1_EL1_ref),
    ((''MVFR0_EL1''), register_ops_of MVFR0_EL1_ref),
    ((''VMPIDR_EL2''), register_ops_of VMPIDR_EL2_ref),
    ((''MPIDR_EL1''), register_ops_of MPIDR_EL1_ref),
    ((''MPAMVPMV_EL2''), register_ops_of MPAMVPMV_EL2_ref),
    ((''MPAMVPM7_EL2''), register_ops_of MPAMVPM7_EL2_ref),
    ((''MPAMVPM6_EL2''), register_ops_of MPAMVPM6_EL2_ref),
    ((''MPAMVPM5_EL2''), register_ops_of MPAMVPM5_EL2_ref),
    ((''MPAMVPM4_EL2''), register_ops_of MPAMVPM4_EL2_ref),
    ((''MPAMVPM3_EL2''), register_ops_of MPAMVPM3_EL2_ref),
    ((''MPAMVPM2_EL2''), register_ops_of MPAMVPM2_EL2_ref),
    ((''MPAMVPM1_EL2''), register_ops_of MPAMVPM1_EL2_ref),
    ((''MPAMVPM0_EL2''), register_ops_of MPAMVPM0_EL2_ref),
    ((''MPAMIDR_EL1''), register_ops_of MPAMIDR_EL1_ref),
    ((''MPAMHCR_EL2''), register_ops_of MPAMHCR_EL2_ref),
    ((''_MPAM1_EL1_0_62''), register_ops_of MPAM1_EL1_0_62_ref),
    ((''_MPAM2_EL2_0_62''), register_ops_of MPAM2_EL2_0_62_ref),
    ((''MPAM3_EL3''), register_ops_of MPAM3_EL3_ref),
    ((''MPAM0_EL1''), register_ops_of MPAM0_EL1_ref),
    ((''VPIDR_EL2''), register_ops_of VPIDR_EL2_ref),
    ((''MIDR_EL1''), register_ops_of MIDR_EL1_ref),
    ((''MDRAR_EL1''), register_ops_of MDRAR_EL1_ref),
    ((''MDCCSR_EL0''), register_ops_of MDCCSR_EL0_ref),
    ((''MDCCINT_EL1''), register_ops_of MDCCINT_EL1_ref),
    ((''MAIR_EL3''), register_ops_of MAIR_EL3_ref),
    ((''MAIR_EL2''), register_ops_of MAIR_EL2_ref),
    ((''MAIR_EL1''), register_ops_of MAIR_EL1_ref),
    ((''LORSA_EL1''), register_ops_of LORSA_EL1_ref),
    ((''LORN_EL1''), register_ops_of LORN_EL1_ref),
    ((''LORID_EL1''), register_ops_of LORID_EL1_ref),
    ((''LOREA_EL1''), register_ops_of LOREA_EL1_ref),
    ((''LORC_EL1''), register_ops_of LORC_EL1_ref),
    ((''ISR_EL1''), register_ops_of ISR_EL1_ref),
    ((''IFSR32_EL2''), register_ops_of IFSR32_EL2_ref),
    ((''ID_PFR2_EL1''), register_ops_of ID_PFR2_EL1_ref),
    ((''ID_PFR1_EL1''), register_ops_of ID_PFR1_EL1_ref),
    ((''ID_PFR0_EL1''), register_ops_of ID_PFR0_EL1_ref),
    ((''ID_MMFR5_EL1''), register_ops_of ID_MMFR5_EL1_ref),
    ((''ID_MMFR4_EL1''), register_ops_of ID_MMFR4_EL1_ref),
    ((''ID_MMFR3_EL1''), register_ops_of ID_MMFR3_EL1_ref),
    ((''ID_MMFR2_EL1''), register_ops_of ID_MMFR2_EL1_ref),
    ((''ID_MMFR1_EL1''), register_ops_of ID_MMFR1_EL1_ref),
    ((''ID_MMFR0_EL1''), register_ops_of ID_MMFR0_EL1_ref),
    ((''ID_ISAR6_EL1''), register_ops_of ID_ISAR6_EL1_ref),
    ((''ID_ISAR5_EL1''), register_ops_of ID_ISAR5_EL1_ref),
    ((''ID_ISAR4_EL1''), register_ops_of ID_ISAR4_EL1_ref),
    ((''ID_ISAR3_EL1''), register_ops_of ID_ISAR3_EL1_ref),
    ((''ID_ISAR2_EL1''), register_ops_of ID_ISAR2_EL1_ref),
    ((''ID_ISAR1_EL1''), register_ops_of ID_ISAR1_EL1_ref),
    ((''ID_ISAR0_EL1''), register_ops_of ID_ISAR0_EL1_ref),
    ((''ID_DFR0_EL1''), register_ops_of ID_DFR0_EL1_ref),
    ((''ID_AFR0_EL1''), register_ops_of ID_AFR0_EL1_ref),
    ((''ID_AA64ZFR0_EL1''), register_ops_of ID_AA64ZFR0_EL1_ref),
    ((''ID_AA64PFR1_EL1''), register_ops_of ID_AA64PFR1_EL1_ref),
    ((''ID_AA64PFR0_EL1''), register_ops_of ID_AA64PFR0_EL1_ref),
    ((''ID_AA64MMFR2_EL1''), register_ops_of ID_AA64MMFR2_EL1_ref),
    ((''ID_AA64MMFR1_EL1''), register_ops_of ID_AA64MMFR1_EL1_ref),
    ((''ID_AA64MMFR0_EL1''), register_ops_of ID_AA64MMFR0_EL1_ref),
    ((''ID_AA64ISAR1_EL1''), register_ops_of ID_AA64ISAR1_EL1_ref),
    ((''ID_AA64ISAR0_EL1''), register_ops_of ID_AA64ISAR0_EL1_ref),
    ((''ID_AA64DFR1_EL1''), register_ops_of ID_AA64DFR1_EL1_ref),
    ((''ID_AA64DFR0_EL1''), register_ops_of ID_AA64DFR0_EL1_ref),
    ((''ID_AA64AFR1_EL1''), register_ops_of ID_AA64AFR1_EL1_ref),
    ((''ID_AA64AFR0_EL1''), register_ops_of ID_AA64AFR0_EL1_ref),
    ((''ICH_VTR_EL2''), register_ops_of ICH_VTR_EL2_ref),
    ((''ICH_VMCR_EL2''), register_ops_of ICH_VMCR_EL2_ref),
    ((''ICH_MISR_EL2''), register_ops_of ICH_MISR_EL2_ref),
    ((''ICH_LR_EL2''), register_ops_of ICH_LR_EL2_ref),
    ((''ICH_ELRSR_EL2''), register_ops_of ICH_ELRSR_EL2_ref),
    ((''ICH_EISR_EL2''), register_ops_of ICH_EISR_EL2_ref),
    ((''ICH_AP1R_EL2''), register_ops_of ICH_AP1R_EL2_ref),
    ((''ICH_AP0R_EL2''), register_ops_of ICH_AP0R_EL2_ref),
    ((''ICV_RPR_EL1''), register_ops_of ICV_RPR_EL1_ref),
    ((''ICC_RPR_EL1''), register_ops_of ICC_RPR_EL1_ref),
    ((''ICV_PMR_EL1''), register_ops_of ICV_PMR_EL1_ref),
    ((''ICC_PMR_EL1''), register_ops_of ICC_PMR_EL1_ref),
    ((''ICC_IGRPEN1_EL3''), register_ops_of ICC_IGRPEN1_EL3_ref),
    ((''ICV_IGRPEN1_EL1''), register_ops_of ICV_IGRPEN1_EL1_ref),
    ((''ICC_IGRPEN1_EL1_S''), register_ops_of ICC_IGRPEN1_EL1_S_ref),
    ((''ICC_IGRPEN1_EL1_NS''), register_ops_of ICC_IGRPEN1_EL1_NS_ref),
    ((''ICV_IGRPEN0_EL1''), register_ops_of ICV_IGRPEN0_EL1_ref),
    ((''ICC_IGRPEN0_EL1''), register_ops_of ICC_IGRPEN0_EL1_ref),
    ((''ICV_IAR1_EL1''), register_ops_of ICV_IAR1_EL1_ref),
    ((''ICC_IAR1_EL1''), register_ops_of ICC_IAR1_EL1_ref),
    ((''ICV_IAR0_EL1''), register_ops_of ICV_IAR0_EL1_ref),
    ((''ICC_IAR0_EL1''), register_ops_of ICC_IAR0_EL1_ref),
    ((''ICV_HPPIR1_EL1''), register_ops_of ICV_HPPIR1_EL1_ref),
    ((''ICC_HPPIR1_EL1''), register_ops_of ICC_HPPIR1_EL1_ref),
    ((''ICV_HPPIR0_EL1''), register_ops_of ICV_HPPIR0_EL1_ref),
    ((''ICC_HPPIR0_EL1''), register_ops_of ICC_HPPIR0_EL1_ref),
    ((''ICC_CTLR_EL3''), register_ops_of ICC_CTLR_EL3_ref),
    ((''ICV_CTLR_EL1''), register_ops_of ICV_CTLR_EL1_ref),
    ((''ICC_CTLR_EL1_S''), register_ops_of ICC_CTLR_EL1_S_ref),
    ((''ICC_CTLR_EL1_NS''), register_ops_of ICC_CTLR_EL1_NS_ref),
    ((''ICV_BPR1_EL1''), register_ops_of ICV_BPR1_EL1_ref),
    ((''ICC_BPR1_EL1_S''), register_ops_of ICC_BPR1_EL1_S_ref),
    ((''ICC_BPR1_EL1_NS''), register_ops_of ICC_BPR1_EL1_NS_ref),
    ((''ICV_BPR0_EL1''), register_ops_of ICV_BPR0_EL1_ref),
    ((''ICC_BPR0_EL1''), register_ops_of ICC_BPR0_EL1_ref),
    ((''ICV_AP1R_EL1''), register_ops_of ICV_AP1R_EL1_ref),
    ((''ICC_AP1R_EL1_S''), register_ops_of ICC_AP1R_EL1_S_ref),
    ((''ICC_AP1R_EL1_NS''), register_ops_of ICC_AP1R_EL1_NS_ref),
    ((''ICC_AP1R_EL1''), register_ops_of ICC_AP1R_EL1_ref),
    ((''ICV_AP0R_EL1''), register_ops_of ICV_AP0R_EL1_ref),
    ((''ICH_HCR_EL2''), register_ops_of ICH_HCR_EL2_ref),
    ((''ICC_SRE_EL3''), register_ops_of ICC_SRE_EL3_ref),
    ((''ICC_SRE_EL2''), register_ops_of ICC_SRE_EL2_ref),
    ((''ICC_SRE_EL1_S''), register_ops_of ICC_SRE_EL1_S_ref),
    ((''ICC_SRE_EL1_NS''), register_ops_of ICC_SRE_EL1_NS_ref),
    ((''ICC_AP0R_EL1''), register_ops_of ICC_AP0R_EL1_ref),
    ((''HSTR_EL2''), register_ops_of HSTR_EL2_ref),
    ((''HACR_EL2''), register_ops_of HACR_EL2_ref),
    ((''FPSR''), register_ops_of FPSR_ref),
    ((''FPEXC32_EL2''), register_ops_of FPEXC32_EL2_ref),
    ((''FPCR''), register_ops_of FPCR_ref),
    ((''ERXSTATUS_EL1''), register_ops_of ERXSTATUS_EL1_ref),
    ((''ERXMISC1_EL1''), register_ops_of ERXMISC1_EL1_ref),
    ((''ERXMISC0_EL1''), register_ops_of ERXMISC0_EL1_ref),
    ((''ERXFR_EL1''), register_ops_of ERXFR_EL1_ref),
    ((''ERXCTLR_EL1''), register_ops_of ERXCTLR_EL1_ref),
    ((''ERXADDR_EL1''), register_ops_of ERXADDR_EL1_ref),
    ((''ERRSELR_EL1''), register_ops_of ERRSELR_EL1_ref),
    ((''ERRIDR_EL1''), register_ops_of ERRIDR_EL1_ref),
    ((''VDISR_EL2''), register_ops_of VDISR_EL2_ref),
    ((''DISR_EL1''), register_ops_of DISR_EL1_ref),
    ((''DCZID_EL0''), register_ops_of DCZID_EL0_ref),
    ((''DBGWVR_EL1''), register_ops_of DBGWVR_EL1_ref),
    ((''DBGWCR_EL1''), register_ops_of DBGWCR_EL1_ref),
    ((''DBGVCR32_EL2''), register_ops_of DBGVCR32_EL2_ref),
    ((''CDBGDTR_EL0''), register_ops_of CDBGDTR_EL0_ref),
    ((''MDSCR_EL1''), register_ops_of MDSCR_EL1_ref),
    ((''DBGDTRRX_EL0''), register_ops_of DBGDTRRX_EL0_ref),
    ((''DBGCLAIMSET_EL1''), register_ops_of DBGCLAIMSET_EL1_ref),
    ((''DBGCLAIMCLR_EL1''), register_ops_of DBGCLAIMCLR_EL1_ref),
    ((''DBGBVR_EL1''), register_ops_of DBGBVR_EL1_ref),
    ((''OSLSR_EL1''), register_ops_of OSLSR_EL1_ref),
    ((''OSDLR_EL1''), register_ops_of OSDLR_EL1_ref),
    ((''DBGPRCR_EL1''), register_ops_of DBGPRCR_EL1_ref),
    ((''SPIDEN''), register_ops_of SPIDEN_ref),
    ((''DBGEN''), register_ops_of DBGEN_ref),
    ((''DSPSR_EL0''), register_ops_of DSPSR_EL0_ref),
    ((''CDLR_EL0''), register_ops_of CDLR_EL0_ref),
    ((''DBGBCR_EL1''), register_ops_of DBGBCR_EL1_ref),
    ((''MDCR_EL3''), register_ops_of MDCR_EL3_ref),
    ((''MDCR_EL2''), register_ops_of MDCR_EL2_ref),
    ((''DBGAUTHSTATUS_EL1''), register_ops_of DBGAUTHSTATUS_EL1_ref),
    ((''DACR32_EL2''), register_ops_of DACR32_EL2_ref),
    ((''CTR_EL0''), register_ops_of CTR_EL0_ref),
    ((''CSSELR_EL1''), register_ops_of CSSELR_EL1_ref),
    ((''CSCR_EL3''), register_ops_of CSCR_EL3_ref),
    ((''CONTEXTIDR_EL2''), register_ops_of CONTEXTIDR_EL2_ref),
    ((''CONTEXTIDR_EL1''), register_ops_of CONTEXTIDR_EL1_ref),
    ((''CNTV_TVAL_EL0''), register_ops_of CNTV_TVAL_EL0_ref),
    ((''CNTV_CVAL_EL0''), register_ops_of CNTV_CVAL_EL0_ref),
    ((''CNTV_CTL_EL0''), register_ops_of CNTV_CTL_EL0_ref),
    ((''CNTVOFF_EL2''), register_ops_of CNTVOFF_EL2_ref),
    ((''CNTVCT_EL0''), register_ops_of CNTVCT_EL0_ref),
    ((''CNTP_TVAL_EL0''), register_ops_of CNTP_TVAL_EL0_ref),
    ((''CNTP_CVAL_EL0''), register_ops_of CNTP_CVAL_EL0_ref),
    ((''CNTP_CTL_EL0''), register_ops_of CNTP_CTL_EL0_ref),
    ((''CNTPS_TVAL_EL1''), register_ops_of CNTPS_TVAL_EL1_ref),
    ((''CNTPS_CVAL_EL1''), register_ops_of CNTPS_CVAL_EL1_ref),
    ((''CNTPS_CTL_EL1''), register_ops_of CNTPS_CTL_EL1_ref),
    ((''CNTPCT_EL0''), register_ops_of CNTPCT_EL0_ref),
    ((''CNTHV_TVAL_EL2''), register_ops_of CNTHV_TVAL_EL2_ref),
    ((''CNTHV_CVAL_EL2''), register_ops_of CNTHV_CVAL_EL2_ref),
    ((''CNTHV_CTL_EL2''), register_ops_of CNTHV_CTL_EL2_ref),
    ((''CNTHP_TVAL_EL2''), register_ops_of CNTHP_TVAL_EL2_ref),
    ((''CNTHP_CVAL_EL2''), register_ops_of CNTHP_CVAL_EL2_ref),
    ((''CNTHP_CTL_EL2''), register_ops_of CNTHP_CTL_EL2_ref),
    ((''CNTKCTL_EL1''), register_ops_of CNTKCTL_EL1_ref),
    ((''CNTHCTL_EL2''), register_ops_of CNTHCTL_EL2_ref),
    ((''CNTFRQ_EL0''), register_ops_of CNTFRQ_EL0_ref),
    ((''CLIDR_EL1''), register_ops_of CLIDR_EL1_ref),
    ((''CHCR_EL2''), register_ops_of CHCR_EL2_ref),
    ((''CCSIDR_EL1''), register_ops_of CCSIDR_EL1_ref),
    ((''AMAIR_EL3''), register_ops_of AMAIR_EL3_ref),
    ((''AMAIR_EL2''), register_ops_of AMAIR_EL2_ref),
    ((''AMAIR_EL1''), register_ops_of AMAIR_EL1_ref),
    ((''AIDR_EL1''), register_ops_of AIDR_EL1_ref),
    ((''AFSR1_EL3''), register_ops_of AFSR1_EL3_ref),
    ((''AFSR1_EL2''), register_ops_of AFSR1_EL2_ref),
    ((''AFSR1_EL1''), register_ops_of AFSR1_EL1_ref),
    ((''AFSR0_EL3''), register_ops_of AFSR0_EL3_ref),
    ((''AFSR0_EL2''), register_ops_of AFSR0_EL2_ref),
    ((''AFSR0_EL1''), register_ops_of AFSR0_EL1_ref),
    ((''ACTLR_EL3''), register_ops_of ACTLR_EL3_ref),
    ((''ACTLR_EL2''), register_ops_of ACTLR_EL2_ref),
    ((''ACTLR_EL1''), register_ops_of ACTLR_EL1_ref),
    ((''SPSR_EL3''), register_ops_of SPSR_EL3_ref),
    ((''SPSR_EL2''), register_ops_of SPSR_EL2_ref),
    ((''SPSR_EL1''), register_ops_of SPSR_EL1_ref),
    ((''SCTLR_EL3''), register_ops_of SCTLR_EL3_ref),
    ((''SCTLR_EL2''), register_ops_of SCTLR_EL2_ref),
    ((''SCTLR_EL1''), register_ops_of SCTLR_EL1_ref),
    ((''EDSCR''), register_ops_of EDSCR_ref),
    ((''CPTR_EL3''), register_ops_of CPTR_EL3_ref),
    ((''CPTR_EL2''), register_ops_of CPTR_EL2_ref),
    ((''CPACR_EL1''), register_ops_of CPACR_EL1_ref),
    ((''VBAR_EL3''), register_ops_of VBAR_EL3_ref),
    ((''VBAR_EL2''), register_ops_of VBAR_EL2_ref),
    ((''VBAR_EL1''), register_ops_of VBAR_EL1_ref),
    ((''ELR_EL3''), register_ops_of ELR_EL3_ref),
    ((''ELR_EL2''), register_ops_of ELR_EL2_ref),
    ((''ELR_EL1''), register_ops_of ELR_EL1_ref),
    ((''CCTLR_EL3''), register_ops_of CCTLR_EL3_ref),
    ((''CCTLR_EL2''), register_ops_of CCTLR_EL2_ref),
    ((''CCTLR_EL1''), register_ops_of CCTLR_EL1_ref),
    ((''CCTLR_EL0''), register_ops_of CCTLR_EL0_ref),
    ((''__BranchTaken''), register_ops_of BranchTaken_ref),
    ((''_PC''), register_ops_of PC_ref),
    ((''TCR_EL3''), register_ops_of TCR_EL3_ref),
    ((''TCR_EL2''), register_ops_of TCR_EL2_ref),
    ((''TCR_EL1''), register_ops_of TCR_EL1_ref),
    ((''HPFAR_EL2''), register_ops_of HPFAR_EL2_ref),
    ((''FAR_EL3''), register_ops_of FAR_EL3_ref),
    ((''FAR_EL2''), register_ops_of FAR_EL2_ref),
    ((''FAR_EL1''), register_ops_of FAR_EL1_ref),
    ((''ESR_EL3''), register_ops_of ESR_EL3_ref),
    ((''ESR_EL2''), register_ops_of ESR_EL2_ref),
    ((''ESR_EL1''), register_ops_of ESR_EL1_ref),
    ((''_R30''), register_ops_of R30_ref),
    ((''_R29''), register_ops_of R29_ref),
    ((''_R28''), register_ops_of R28_ref),
    ((''_R27''), register_ops_of R27_ref),
    ((''_R26''), register_ops_of R26_ref),
    ((''_R25''), register_ops_of R25_ref),
    ((''_R24''), register_ops_of R24_ref),
    ((''_R23''), register_ops_of R23_ref),
    ((''_R22''), register_ops_of R22_ref),
    ((''_R21''), register_ops_of R21_ref),
    ((''_R20''), register_ops_of R20_ref),
    ((''_R19''), register_ops_of R19_ref),
    ((''_R18''), register_ops_of R18_ref),
    ((''_R17''), register_ops_of R17_ref),
    ((''_R16''), register_ops_of R16_ref),
    ((''_R15''), register_ops_of R15_ref),
    ((''_R14''), register_ops_of R14_ref),
    ((''_R13''), register_ops_of R13_ref),
    ((''_R12''), register_ops_of R12_ref),
    ((''_R11''), register_ops_of R11_ref),
    ((''_R10''), register_ops_of R10_ref),
    ((''_R09''), register_ops_of R09_ref),
    ((''_R08''), register_ops_of R08_ref),
    ((''_R07''), register_ops_of R07_ref),
    ((''_R06''), register_ops_of R06_ref),
    ((''_R05''), register_ops_of R05_ref),
    ((''_R04''), register_ops_of R04_ref),
    ((''_R03''), register_ops_of R03_ref),
    ((''_R02''), register_ops_of R02_ref),
    ((''_R01''), register_ops_of R01_ref),
    ((''_R00''), register_ops_of R00_ref),
    ((''__ThisInstr''), register_ops_of ThisInstr_ref),
    ((''PSTATE''), register_ops_of PSTATE_ref),
    ((''HCR_EL2''), register_ops_of HCR_EL2_ref),
    ((''SCR_EL3''), register_ops_of SCR_EL3_ref),
    ((''CNTHVS_TVAL_EL2''), register_ops_of CNTHVS_TVAL_EL2_ref),
    ((''CNTHVS_CVAL_EL2''), register_ops_of CNTHVS_CVAL_EL2_ref),
    ((''CNTHVS_CTL_EL2''), register_ops_of CNTHVS_CTL_EL2_ref),
    ((''CNTHPS_TVAL_EL2''), register_ops_of CNTHPS_TVAL_EL2_ref),
    ((''CNTHPS_CVAL_EL2''), register_ops_of CNTHPS_CVAL_EL2_ref),
    ((''CNTHPS_CTL_EL2''), register_ops_of CNTHPS_CTL_EL2_ref),
    ((''PCC''), register_ops_of PCC_ref),
    ((''SEE''), register_ops_of SEE_ref)
  ])\<close>


definition register_accessors  :: \<open>(string \<Rightarrow> regstate \<Rightarrow>(register_value)option)*(string \<Rightarrow> register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option)\<close>  where 
     \<open> register_accessors = ( mk_accessors ((\<lambda> nm .  Map.map_of registers nm)))\<close>


\<comment> \<open>\<open>val get_regval : string -> regstate -> maybe register_value\<close>\<close>
definition get_regval  :: \<open> string \<Rightarrow> regstate \<Rightarrow>(register_value)option \<close>  where 
     \<open> get_regval = ( fst register_accessors )\<close>


\<comment> \<open>\<open>val set_regval : string -> register_value -> regstate -> maybe regstate\<close>\<close>
definition set_regval  :: \<open> string \<Rightarrow> register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option \<close>  where 
     \<open> set_regval = ( snd register_accessors )\<close>



type_synonym( 'a, 'r) MR =" (register_value, regstate, 'a, 'r, exception) base_monadR "
type_synonym 'a M =" (register_value, regstate, 'a, exception) base_monad "
end
