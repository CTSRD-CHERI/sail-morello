chapter \<open>Generated by Lem from \<open>/local/scratch/tb592/dev/sail-morello/src/lem/morello_bindings.lem\<close>.\<close>

theory "Morello_bindings" 

imports
  Main
  "LEM.Lem_pervasives_extra"
  "Sail.Sail2_instr_kinds"
  "Sail.Sail2_values"
  "Sail.Sail2_operators_mwords"
  "Sail.Sail2_prompt_monad"
  "Sail.Sail2_prompt"
  "Prelude"
  "Sail.Sail2_undefined"
  "Morello_types"

begin 

\<comment> \<open>\<open>============================================================================\<close>\<close>
\<comment> \<open>\<open>  BSD 3-clause Clear License                                                \<close>\<close>
\<comment> \<open>\<open>                                                                            \<close>\<close>
\<comment> \<open>\<open>  Copyright (c) 2022                                                        \<close>\<close>
\<comment> \<open>\<open>    Arm Limited (or its affiliates),                                        \<close>\<close>
\<comment> \<open>\<open>    Thomas Bauereiss,                                                       \<close>\<close>
\<comment> \<open>\<open>    Brian Campbell,                                                         \<close>\<close>
\<comment> \<open>\<open>    Alasdair Armstrong,                                                     \<close>\<close>
\<comment> \<open>\<open>    Alastair Reid,                                                          \<close>\<close>
\<comment> \<open>\<open>    Peter Sewell                                                            \<close>\<close>
\<comment> \<open>\<open>                                                                            \<close>\<close>
\<comment> \<open>\<open>  All rights reserved.                                                      \<close>\<close>
\<comment> \<open>\<open>                                                                            \<close>\<close>
\<comment> \<open>\<open>  Redistribution and use in source and binary forms, with or without        \<close>\<close>
\<comment> \<open>\<open>  modification, are permitted (subject to the limitations in the            \<close>\<close>
\<comment> \<open>\<open>  disclaimer below) provided that the following conditions are met:         \<close>\<close>
\<comment> \<open>\<open>                                                                            \<close>\<close>
\<comment> \<open>\<open>    * Redistributions of source code must retain the above copyright        \<close>\<close>
\<comment> \<open>\<open>      notice, this list of conditions and the following disclaimer.         \<close>\<close>
\<comment> \<open>\<open>    * Redistributions in binary form must reproduce the above copyright     \<close>\<close>
\<comment> \<open>\<open>      notice, this list of conditions and the following disclaimer in the   \<close>\<close>
\<comment> \<open>\<open>      documentation and/or other materials provided with the distribution.  \<close>\<close>
\<comment> \<open>\<open>    * Neither the name of ARM Limited nor the names of its contributors     \<close>\<close>
\<comment> \<open>\<open>      may be used to endorse or promote products derived from this          \<close>\<close>
\<comment> \<open>\<open>      software without specific prior written permission.                   \<close>\<close>
\<comment> \<open>\<open>                                                                            \<close>\<close>
\<comment> \<open>\<open>  NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED   \<close>\<close>
\<comment> \<open>\<open>  BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND   \<close>\<close>
\<comment> \<open>\<open>  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,    \<close>\<close>
\<comment> \<open>\<open>  BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND         \<close>\<close>
\<comment> \<open>\<open>  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE   \<close>\<close>
\<comment> \<open>\<open>  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,      \<close>\<close>
\<comment> \<open>\<open>  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  \<close>\<close>
\<comment> \<open>\<open>  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF      \<close>\<close>
\<comment> \<open>\<open>  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON    \<close>\<close>
\<comment> \<open>\<open>  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   \<close>\<close>
\<comment> \<open>\<open>  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  \<close>\<close>
\<comment> \<open>\<open>  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.         \<close>\<close>
\<comment> \<open>\<open>============================================================================\<close>\<close>

\<comment> \<open>\<open>open import Pervasives_extra\<close>\<close>
\<comment> \<open>\<open>open import Sail2_instr_kinds\<close>\<close>
\<comment> \<open>\<open>open import Sail2_values\<close>\<close>
\<comment> \<open>\<open>open import Sail2_operators_mwords\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt_monad\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt\<close>\<close>
\<comment> \<open>\<open>open import Sail2_undefined\<close>\<close>
\<comment> \<open>\<open>open import Prelude\<close>\<close>
\<comment> \<open>\<open>open import Morello_types\<close>\<close>

\<comment> \<open>\<open>val write_tag_bool : forall 'addrsize 'e. Size 'addrsize => write_kind -> mword 'addrsize -> integer -> bool -> monad register_value unit 'e\<close>\<close>
definition write_tag_bool  :: \<open> write_kind \<Rightarrow>('addrsize::len)Word.word \<Rightarrow> int \<Rightarrow> bool \<Rightarrow>((register_value),(unit),'e)monad \<close>  where 
     \<open> write_tag_bool wk addr sz tag = (
  \<comment> \<open>\<open> FIXME: The monad does not currently support writing a tag without data.
   * We probably want to support this at some point, not just for CHERI tags,
   * but also other kinds of metadata (e.g. MTE).  As a workaround in the
   * meantime, we overapproximate the set of possible behaviours by
   * non-deterministically choosing a data value.  An alternative workaround is
   * to load the data from memory and write it back, but that leads to problems
   * with the capability monotonicity proof (the properties require an
   * authorising capability with load permission, if a load is performed). \<close>\<close>
  mword_nondet instance_Sail2_values_Register_Value_Morello_types_register_value_dict ()  \<bind> ((\<lambda> (data ::  128 Word.word) . 
  write_memt instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict wk addr sz data (bitU_of_bool tag) \<bind>  
  ((\<lambda>x .  (case  x of _ => return ()  ))))))\<close> 
  for  wk  :: " write_kind " 
  and  addr  :: "('addrsize::len)Word.word " 
  and  sz  :: " int " 
  and  tag  :: " bool "


\<comment> \<open>\<open>val __UNKNOWN_Capability : forall 'e. unit -> monad register_value (mword ty129) 'e\<close>\<close>
definition UNKNOWN_Capability  :: \<open> unit \<Rightarrow>((register_value),((129)Word.word),'e)monad \<close>  where 
     \<open> UNKNOWN_Capability _ = ( choose_convert bitvector_129_dec_of_regval (''UNKNOWN_Capability''))\<close>


\<comment> \<open>\<open>val __UNKNOWN_bits : forall 'n. Size 'n => integer -> M (mword 'n)\<close>\<close>
definition UNKNOWN_bits  :: \<open> int \<Rightarrow>((register_value),(('n::len)Word.word),(exception))monad \<close>  where 
     \<open> UNKNOWN_bits n = (
  if n =( 129 :: int) then
    UNKNOWN_Capability ()  \<bind> ((\<lambda> c . 
    return (extz_vec n c)))
  else undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Register_Value_Morello_types_register_value_dict n )\<close> 
  for  n  :: " int "

end
