(*Generated by Sail from morello.*)
open import Pervasives_extra
open import Sail2_instr_kinds
open import Sail2_values
open import Sail2_string
open import Sail2_operators_mwords
open import Sail2_prompt_monad
open import Prelude
open import Sail2_prompt
open import Sail2_undefined
type bits 'n = mword 'n

type regfp  =
  | RFull of (string)
  | RSlice of ((string * ii * ii))
  | RSliceBit of ((string * ii))
  | RField of ((string * string))



type regfps  = list regfp

type niafp  =
  | NIAFP_successor of (unit)
  | NIAFP_concrete_address of (bits ty64)
  | NIAFP_indirect_address of (unit)



type niafps  = list niafp

type diafp  = | DIAFP_none of (unit) | DIAFP_concrete of (bits ty64) | DIAFP_reg of (regfp)



















type signal = | LOW | HIGH



type exception  =
  | Error_Undefined of (unit)
  | Error_See of (string)
  | Error_ImplementationDefined of (string)
  | Error_ReservedEncoding of (unit)
  | Error_ExceptionTaken of (unit)
  | Error_Unpredictable of (unit)
  | Error_ConstrainedUnpredictable of (unit)
  | Error_SError of (unit)







type Capability  = bits ty129

type ProcState  =
  <| ProcState_N : bits ty1;
     ProcState_Z : bits ty1;
     ProcState_C : bits ty1;
     ProcState_V : bits ty1;
     ProcState_D : bits ty1;
     ProcState_A : bits ty1;
     ProcState_I : bits ty1;
     ProcState_F : bits ty1;
     ProcState_PAN : bits ty1;
     ProcState_UAO : bits ty1;
     ProcState_DIT : bits ty1;
     ProcState_TCO : bits ty1;
     ProcState_C64 : bits ty1;
     ProcState_SS : bits ty1;
     ProcState_IL : bits ty1;
     ProcState_EL : bits ty2;
     ProcState_nRW : bits ty1;
     ProcState_SP : bits ty1;
     ProcState_Q : bits ty1;
     ProcState_GE : bits ty4;
     ProcState_SSBS : bits ty1;
     ProcState_IT : bits ty8;
     ProcState_J : bits ty1;
     ProcState_T : bits ty1;
     ProcState_E : bits ty1;
     ProcState_M : bits ty5; |>


type Constraint =
  | Constraint_NONE
  | Constraint_UNKNOWN
  | Constraint_UNDEF
  | Constraint_UNDEFEL0
  | Constraint_NOP
  | Constraint_TRUE
  | Constraint_FALSE
  | Constraint_DISABLED
  | Constraint_UNCOND
  | Constraint_COND
  | Constraint_ADDITIONAL_DECODE
  | Constraint_WBSUPPRESS
  | Constraint_FAULT
  | Constraint_FORCE
  | Constraint_FORCENOSLCHECK



type Unpredictable =
  | Unpredictable_WBOVERLAPLD
  | Unpredictable_WBOVERLAPST
  | Unpredictable_LDPOVERLAP
  | Unpredictable_BASEOVERLAP
  | Unpredictable_DATAOVERLAP
  | Unpredictable_DEVPAGE2
  | Unpredictable_INSTRDEVICE
  | Unpredictable_RESCPACR
  | Unpredictable_RESMAIR
  | Unpredictable_RESTEXCB
  | Unpredictable_RESPRRR
  | Unpredictable_RESDACR
  | Unpredictable_RESVTCRS
  | Unpredictable_RESTnSZ
  | Unpredictable_LARGEIPA
  | Unpredictable_ESRCONDPASS
  | Unpredictable_ILZEROIT
  | Unpredictable_ILZEROT
  | Unpredictable_BPVECTORCATCHPRI
  | Unpredictable_VCMATCHHALF
  | Unpredictable_VCMATCHDAPA
  | Unpredictable_WPMASKANDBAS
  | Unpredictable_WPBASCONTIGUOUS
  | Unpredictable_RESWPMASK
  | Unpredictable_WPMASKEDBITS
  | Unpredictable_RESBPWPCTRL
  | Unpredictable_BPNOTIMPL
  | Unpredictable_RESBPTYPE
  | Unpredictable_BPNOTCTXCMP
  | Unpredictable_BPMATCHHALF
  | Unpredictable_BPMISMATCHHALF
  | Unpredictable_RESTARTALIGNPC
  | Unpredictable_RESTARTZEROUPPERPC
  | Unpredictable_ZEROUPPER
  | Unpredictable_ERETZEROUPPERPC
  | Unpredictable_A32FORCEALIGNPC
  | Unpredictable_SMD
  | Unpredictable_AFUPDATE
  | Unpredictable_IESBinDebug
  | Unpredictable_BADPMSFCR
  | Unpredictable_LINKTRANSFEROVERLAPLD
  | Unpredictable_LINKBASEOVERLAPLD
  | Unpredictable_CLEARERRITEZERO



type Exception =
  | Exception_Uncategorized
  | Exception_WFxTrap
  | Exception_CP15RTTrap
  | Exception_CP15RRTTrap
  | Exception_CP14RTTrap
  | Exception_CP14DTTrap
  | Exception_AdvSIMDFPAccessTrap
  | Exception_FPIDTrap
  | Exception_CP14RRTTrap
  | Exception_IllegalState
  | Exception_SupervisorCall
  | Exception_HypervisorCall
  | Exception_MonitorCall
  | Exception_SystemRegisterTrap
  | Exception_InstructionAbort
  | Exception_PCAlignment
  | Exception_DataAbort
  | Exception_SPAlignment
  | Exception_FPTrappedException
  | Exception_SError
  | Exception_Breakpoint
  | Exception_SoftwareStep
  | Exception_Watchpoint
  | Exception_SoftwareBreakpoint
  | Exception_VectorCatch
  | Exception_IRQ
  | Exception_CapabilitySysRegTrap
  | Exception_CapabilityAccess
  | Exception_FIQ



type ExceptionRecord  =
  <| ExceptionRecord_exceptype : Exception;
     ExceptionRecord_syndrome : bits ty25;
     ExceptionRecord_vaddress : bits ty64;
     ExceptionRecord_ipavalid : bool;
     ExceptionRecord_ipaddress : bits ty48; |>


type ArchVersion = | ARMv8p0 | ARMv8p1 | ARMv8p2



type BranchType =
  | BranchType_DIRCALL
  | BranchType_INDCALL
  | BranchType_ERET
  | BranchType_DBGEXIT
  | BranchType_RET
  | BranchType_DIR
  | BranchType_INDIR
  | BranchType_EXCEPTION
  | BranchType_RESET
  | BranchType_UNKNOWN



























type CrossTriggerIn =
  | CrossTriggerIn_CrossHalt
  | CrossTriggerIn_PMUOverflow
  | CrossTriggerIn_RSVD2
  | CrossTriggerIn_RSVD3
  | CrossTriggerIn_TraceExtOut0
  | CrossTriggerIn_TraceExtOut1
  | CrossTriggerIn_TraceExtOut2
  | CrossTriggerIn_TraceExtOut3



type AccType =
  | AccType_NORMAL
  | AccType_VEC
  | AccType_STREAM
  | AccType_VECSTREAM
  | AccType_ATOMIC
  | AccType_ATOMICRW
  | AccType_ORDERED
  | AccType_ORDEREDRW
  | AccType_ORDEREDATOMIC
  | AccType_ORDEREDATOMICRW
  | AccType_LIMITEDORDERED
  | AccType_UNPRIV
  | AccType_IFETCH
  | AccType_PTW
  | AccType_DC
  | AccType_DC_UNPRIV
  | AccType_IC
  | AccType_DCZVA
  | AccType_AT



type Fault =
  | Fault_None
  | Fault_AccessFlag
  | Fault_Alignment
  | Fault_Background
  | Fault_Domain
  | Fault_Permission
  | Fault_Translation
  | Fault_AddressSize
  | Fault_SyncExternal
  | Fault_SyncExternalOnWalk
  | Fault_SyncParity
  | Fault_SyncParityOnWalk
  | Fault_AsyncParity
  | Fault_AsyncExternal
  | Fault_Debug
  | Fault_TLBConflict
  | Fault_HWUpdateAccessFlag
  | Fault_CapTag
  | Fault_CapSeal
  | Fault_CapBounds
  | Fault_CapPerm
  | Fault_CapPagePerm
  | Fault_Lockdown
  | Fault_Exclusive
  | Fault_ICacheMaint



type FaultRecord  =
  <| FaultRecord_statuscode : Fault;
     FaultRecord_acctype : AccType;
     FaultRecord_ipaddress : bits ty48;
     FaultRecord_s2fs1walk : bool;
     FaultRecord_write : bool;
     FaultRecord_level : ii;
     FaultRecord_extflag : bits ty1;
     FaultRecord_secondstage : bool;
     FaultRecord_domain : bits ty4;
     FaultRecord_errortype : bits ty2;
     FaultRecord_debugmoe : bits ty4; |>


type FullAddress  = <| FullAddress_address : bits ty48; FullAddress_NS : bits ty1; |>


type DeviceType = | DeviceType_GRE | DeviceType_nGRE | DeviceType_nGnRE | DeviceType_nGnRnE



type MemAttrHints  =
  <| MemAttrHints_attrs : bits ty2; MemAttrHints_hints : bits ty2; MemAttrHints_transient : bool; |>


type MemType = | MemType_Normal | MemType_Device



type MemoryAttributes  =
  <| MemoryAttributes_memtype : MemType;
     MemoryAttributes_device : DeviceType;
     MemoryAttributes_inner : MemAttrHints;
     MemoryAttributes_outer : MemAttrHints;
     MemoryAttributes_readtagzero : bool;
     MemoryAttributes_readtagfault : bool;
     MemoryAttributes_readtagfaulttgen : bits ty1;
     MemoryAttributes_writetagfault : bool;
     MemoryAttributes_iss2writetagfault : bool;
     MemoryAttributes_shareable : bool;
     MemoryAttributes_outershareable : bool; |>


type AddressDescriptor  =
  <| AddressDescriptor_fault : FaultRecord;
     AddressDescriptor_memattrs : MemoryAttributes;
     AddressDescriptor_paddress : FullAddress;
     AddressDescriptor_vaddress : bits ty64; |>


type VirtualAddressType = | VA_Bits64 | VA_Capability



type VirtualAddress  =
  <| VirtualAddress_vatype : VirtualAddressType;
     VirtualAddress_base : bits ty129;
     VirtualAddress_offset : bits ty64; |>


type MPAMinfo  =
  <| MPAMinfo_mpam_ns : bits ty1; MPAMinfo_partid : bits ty16; MPAMinfo_pmg : bits ty8; |>


type AccessDescriptor  =
  <| AccessDescriptor_acctype : AccType;
     AccessDescriptor_mpam : MPAMinfo;
     AccessDescriptor_page_table_walk : bool;
     AccessDescriptor_secondstage : bool;
     AccessDescriptor_s2fs1walk : bool;
     AccessDescriptor_level : ii; |>


type Permissions  =
  <| Permissions_ap : bits ty3;
     Permissions_xn : bits ty1;
     Permissions_xxn : bits ty1;
     Permissions_pxn : bits ty1; |>


type DescriptorUpdate  =
  <| DescriptorUpdate_AF : bool;
     DescriptorUpdate_AP : bool;
     DescriptorUpdate_SC : bool;
     DescriptorUpdate_descaddr : AddressDescriptor; |>


type TLBRecord  =
  <| TLBRecord_perms : Permissions;
     TLBRecord_nG : bits ty1;
     TLBRecord_domain : bits ty4;
     TLBRecord_contiguous : bool;
     TLBRecord_level : ii;
     TLBRecord_blocksize : ii;
     TLBRecord_descupdate : DescriptorUpdate;
     TLBRecord_CnP : bits ty1;
     TLBRecord_addrdesc : AddressDescriptor; |>


type MBReqDomain =
  | MBReqDomain_Nonshareable
  | MBReqDomain_InnerShareable
  | MBReqDomain_OuterShareable
  | MBReqDomain_FullSystem



type MBReqTypes = | MBReqTypes_Reads | MBReqTypes_Writes | MBReqTypes_All



type PrefetchHint = | Prefetch_READ | Prefetch_WRITE | Prefetch_EXEC



type FPExc =
  | FPExc_InvalidOp
  | FPExc_DivideByZero
  | FPExc_Overflow
  | FPExc_Underflow
  | FPExc_Inexact
  | FPExc_InputDenorm



type FPRounding =
  | FPRounding_TIEEVEN
  | FPRounding_POSINF
  | FPRounding_NEGINF
  | FPRounding_ZERO
  | FPRounding_TIEAWAY
  | FPRounding_ODD



type FPType = | FPType_Nonzero | FPType_Zero | FPType_Infinity | FPType_QNaN | FPType_SNaN



type TLBContext  =
  <| TLBContext_twostage : bool;
     TLBContext_secondstage : bool;
     TLBContext_asid : bits ty16;
     TLBContext_vmid : bits ty16;
     TLBContext_el : bits ty2;
     TLBContext_secure : bool;
     TLBContext_t_sz : bits ty6;
     TLBContext_granule_size : ii; |>


type TLBLine  =
  <| TLBLine_address : bits ty64;
     TLBLine_context : TLBContext;
     TLBLine_data : TLBRecord;
     TLBLine_valid_name : bool; |>




type CountOp = | CountOp_CLZ | CountOp_CLS | CountOp_CNT



type ExtendType =
  | ExtendType_SXTB
  | ExtendType_SXTH
  | ExtendType_SXTW
  | ExtendType_SXTX
  | ExtendType_UXTB
  | ExtendType_UXTH
  | ExtendType_UXTW
  | ExtendType_UXTX



type FPMaxMinOp = | FPMaxMinOp_MAX | FPMaxMinOp_MIN | FPMaxMinOp_MAXNUM | FPMaxMinOp_MINNUM



type FPUnaryOp = | FPUnaryOp_ABS | FPUnaryOp_MOV | FPUnaryOp_NEG | FPUnaryOp_SQRT



type FPConvOp = | FPConvOp_CVT_FtoI | FPConvOp_CVT_ItoF | FPConvOp_MOV_FtoI | FPConvOp_MOV_ItoF



type MoveWideOp = | MoveWideOp_N | MoveWideOp_Z | MoveWideOp_K



type ShiftType = | ShiftType_LSL | ShiftType_LSR | ShiftType_ASR | ShiftType_ROR



type LogicalOp = | LogicalOp_AND | LogicalOp_EOR | LogicalOp_ORR



type MemOp = | MemOp_LOAD | MemOp_STORE | MemOp_PREFETCH



type MemAtomicOp =
  | MemAtomicOp_ADD
  | MemAtomicOp_BIC
  | MemAtomicOp_EOR
  | MemAtomicOp_ORR
  | MemAtomicOp_SMAX
  | MemAtomicOp_SMIN
  | MemAtomicOp_UMAX
  | MemAtomicOp_UMIN
  | MemAtomicOp_SWP



type SystemHintOp =
  | SystemHintOp_NOP
  | SystemHintOp_YIELD
  | SystemHintOp_WFE
  | SystemHintOp_WFI
  | SystemHintOp_SEV
  | SystemHintOp_SEVL
  | SystemHintOp_ESB
  | SystemHintOp_PSB
  | SystemHintOp_CSDB



type PSTATEField =
  | PSTATEField_DAIFSet
  | PSTATEField_DAIFClr
  | PSTATEField_PAN
  | PSTATEField_UAO
  | PSTATEField_SSBS
  | PSTATEField_SP



type VBitOp = | VBitOp_VBIF | VBitOp_VBIT | VBitOp_VBSL | VBitOp_VEOR



type CompareOp = | CompareOp_GT | CompareOp_GE | CompareOp_EQ | CompareOp_LE | CompareOp_LT



type ImmediateOp = | ImmediateOp_MOVI | ImmediateOp_MVNI | ImmediateOp_ORR | ImmediateOp_BIC



type ReduceOp =
  | ReduceOp_FMINNUM
  | ReduceOp_FMAXNUM
  | ReduceOp_FMIN
  | ReduceOp_FMAX
  | ReduceOp_FADD
  | ReduceOp_ADD





type __InstrEnc = | __A64 | __A32 | __T16 | __T32



type instr_ast  =
  | Instr_BLRR_C_C of ((bits ty2 * bits ty5))
  | Instr_BLRS_C_C of ((bits ty2 * bits ty5))
  | Instr_BLRS_C_C_C of ((bits ty5 * bits ty2 * bits ty5))
  | Instr_BLR_C_C of ((bits ty2 * bits ty5))
  | Instr_BRR_C_C of ((bits ty2 * bits ty5))
  | Instr_BRS_C_C_C of ((bits ty5 * bits ty2 * bits ty5))
  | Instr_BRS_C_C of ((bits ty2 * bits ty5))
  | Instr_BR_C_C of ((bits ty2 * bits ty5))
  | Instr_RETR_C_C of ((bits ty2 * bits ty5))
  | Instr_RETS_C_C of ((bits ty2 * bits ty5))
  | Instr_RETS_C_C_C of ((bits ty5 * bits ty2 * bits ty5))
  | Instr_RET_C_C of ((bits ty2 * bits ty5))
  | Instr_BLR_CI_C of ((bits ty7 * bits ty5))
  | Instr_BR_CI_C of ((bits ty7 * bits ty5))
  | Instr_LDPBLR_C_C_C of ((bits ty2 * bits ty5 * bits ty5))
  | Instr_LDPBR_C_C_C of ((bits ty2 * bits ty5 * bits ty5))
  | Instr_ALDAR_C_R_C of ((bits ty1 * bits ty5 * bits ty5))
  | Instr_ALDR_C_RUI_C of ((bits ty1 * bits ty9 * bits ty2 * bits ty5 * bits ty5))
  | Instr_ALDR_C_RRB_C of ((bits ty5 * bits ty1 * bits ty1 * bits ty1 * bits ty1 * bits ty5 * bits ty5))
  | Instr_ALDUR_C_RI_C of ((bits ty2 * bits ty1 * bits ty9 * bits ty2 * bits ty5 * bits ty5))
  | Instr_CASAL_C_R_C of ((bits ty1 * bits ty5 * bits ty1 * bits ty5 * bits ty5))
  | Instr_CASA_C_R_C of ((bits ty1 * bits ty5 * bits ty1 * bits ty5 * bits ty5))
  | Instr_CASL_C_R_C of ((bits ty1 * bits ty5 * bits ty1 * bits ty5 * bits ty5))
  | Instr_CAS_C_R_C of ((bits ty1 * bits ty5 * bits ty1 * bits ty5 * bits ty5))
  | Instr_LDAPR_C_R_C of ((bits ty5 * bits ty5))
  | Instr_LDAR_C_R_C of ((bits ty1 * bits ty5 * bits ty5))
  | Instr_LDAXP_C_R_C of ((bits ty1 * bits ty5 * bits ty5 * bits ty5))
  | Instr_LDAXR_C_R_C of ((bits ty1 * bits ty5 * bits ty5))
  | Instr_LDNP_C_RIB_C of ((bits ty1 * bits ty7 * bits ty5 * bits ty5 * bits ty5))
  | Instr_LDP_CC_RIAW_C of ((bits ty1 * bits ty7 * bits ty5 * bits ty5 * bits ty5))
  | Instr_LDP_C_RIBW_C of ((bits ty1 * bits ty7 * bits ty5 * bits ty5 * bits ty5))
  | Instr_LDP_C_RIB_C of ((bits ty1 * bits ty7 * bits ty5 * bits ty5 * bits ty5))
  | Instr_LDR_C_I_C of ((bits ty17 * bits ty5))
  | Instr_LDR_C_RIAW_C of ((bits ty2 * bits ty9 * bits ty5 * bits ty5))
  | Instr_LDR_C_RIBW_C of ((bits ty2 * bits ty9 * bits ty5 * bits ty5))
  | Instr_LDR_C_RUIB_C of ((bits ty1 * bits ty12 * bits ty5 * bits ty5))
  | Instr_LDR_C_RRB_C of ((bits ty2 * bits ty5 * bits ty1 * bits ty1 * bits ty1 * bits ty5 * bits ty5))
  | Instr_LDTR_C_RIB_C of ((bits ty2 * bits ty9 * bits ty5 * bits ty5))
  | Instr_LDUR_C_RI_C of ((bits ty2 * bits ty9 * bits ty5 * bits ty5))
  | Instr_LDXP_C_R_C of ((bits ty1 * bits ty5 * bits ty5 * bits ty5))
  | Instr_LDXR_C_R_C of ((bits ty1 * bits ty5 * bits ty5))
  | Instr_SWPAL_CC_R_C of ((bits ty1 * bits ty1 * bits ty5 * bits ty5 * bits ty5))
  | Instr_SWPA_CC_R_C of ((bits ty1 * bits ty1 * bits ty5 * bits ty5 * bits ty5))
  | Instr_SWPL_CC_R_C of ((bits ty1 * bits ty1 * bits ty5 * bits ty5 * bits ty5))
  | Instr_SWP_CC_R_C of ((bits ty1 * bits ty1 * bits ty5 * bits ty5 * bits ty5))
  | Instr_LDCT_R_R__ of ((bits ty2 * bits ty5 * bits ty5))
  | Instr_Other of (bits ty32)







type register_value  =
  | Regval_vector of (list register_value)
  | Regval_list of (list register_value)
  | Regval_option of (maybe register_value)
  | Regval_bool of (bool)
  | Regval_int of (ii)
  | Regval_real of (real)
  | Regval_string of (string)
  | Regval_ProcState of (ProcState)
  | Regval___InstrEnc of (__InstrEnc)
  | Regval_bit of (bitU)
  | Regval_bitvector_128_dec of (mword ty128)
  | Regval_bitvector_129_dec of (mword ty129)
  | Regval_bitvector_1_dec of (mword ty1)
  | Regval_bitvector_2_dec of (mword ty2)
  | Regval_bitvector_32_dec of (mword ty32)
  | Regval_bitvector_48_dec of (mword ty48)
  | Regval_bitvector_63_dec of (mword ty63)
  | Regval_bitvector_64_dec of (mword ty64)
  | Regval_instr_ast of (instr_ast)
  | Regval_signal of (signal)



type regstate  =
  <| ProcState_reg : string -> ProcState;
     __InstrEnc_reg : string -> __InstrEnc;
     bitvector_129_dec_reg : string -> mword ty129;
     bitvector_1_dec_reg : string -> mword ty1;
     bitvector_2_dec_reg : string -> mword ty2;
     bitvector_32_dec_reg : string -> mword ty32;
     bitvector_48_dec_reg : string -> mword ty48;
     bitvector_63_dec_reg : string -> mword ty63;
     bitvector_64_dec_reg : string -> mword ty64;
     bool_reg : string -> bool;
     instr_ast_reg : string -> instr_ast;
     int_reg : string -> ii;
     signal_reg : string -> signal;
     vector_16_inc_bitvector_32_dec_reg : string -> list (mword ty32);
     vector_16_inc_bitvector_64_dec_reg : string -> list (mword ty64);
     vector_31_inc_bitvector_32_dec_reg : string -> list (mword ty32);
     vector_32_inc_bitvector_128_dec_reg : string -> list (mword ty128);
     vector_4_inc_bitvector_32_dec_reg : string -> list (mword ty32); |>




val ProcState_of_regval : register_value -> maybe ProcState

let ProcState_of_regval merge_var =
   match merge_var with | Regval_ProcState (v) -> Just v | _ -> Nothing end

val regval_of_ProcState : ProcState -> register_value

let regval_of_ProcState v = Regval_ProcState v

val __InstrEnc_of_regval : register_value -> maybe __InstrEnc

let __InstrEnc_of_regval merge_var =
   match merge_var with | Regval___InstrEnc (v) -> Just v | _ -> Nothing end

val regval_of___InstrEnc : __InstrEnc -> register_value

let regval_of___InstrEnc v = Regval___InstrEnc v

val bit_of_regval : register_value -> maybe bitU

let bit_of_regval merge_var = match merge_var with | Regval_bit (v) -> Just v | _ -> Nothing end

val regval_of_bit : bitU -> register_value

let regval_of_bit v = Regval_bit v

val bitvector_128_dec_of_regval : register_value -> maybe (mword ty128)

let bitvector_128_dec_of_regval merge_var =
   match merge_var with | Regval_bitvector_128_dec (v) -> Just v | _ -> Nothing end

val regval_of_bitvector_128_dec : mword ty128 -> register_value

let regval_of_bitvector_128_dec v = Regval_bitvector_128_dec v

val bitvector_129_dec_of_regval : register_value -> maybe (mword ty129)

let bitvector_129_dec_of_regval merge_var =
   match merge_var with | Regval_bitvector_129_dec (v) -> Just v | _ -> Nothing end

val regval_of_bitvector_129_dec : mword ty129 -> register_value

let regval_of_bitvector_129_dec v = Regval_bitvector_129_dec v

val bitvector_1_dec_of_regval : register_value -> maybe (mword ty1)

let bitvector_1_dec_of_regval merge_var =
   match merge_var with | Regval_bitvector_1_dec (v) -> Just v | _ -> Nothing end

val regval_of_bitvector_1_dec : mword ty1 -> register_value

let regval_of_bitvector_1_dec v = Regval_bitvector_1_dec v

val bitvector_2_dec_of_regval : register_value -> maybe (mword ty2)

let bitvector_2_dec_of_regval merge_var =
   match merge_var with | Regval_bitvector_2_dec (v) -> Just v | _ -> Nothing end

val regval_of_bitvector_2_dec : mword ty2 -> register_value

let regval_of_bitvector_2_dec v = Regval_bitvector_2_dec v

val bitvector_32_dec_of_regval : register_value -> maybe (mword ty32)

let bitvector_32_dec_of_regval merge_var =
   match merge_var with | Regval_bitvector_32_dec (v) -> Just v | _ -> Nothing end

val regval_of_bitvector_32_dec : mword ty32 -> register_value

let regval_of_bitvector_32_dec v = Regval_bitvector_32_dec v

val bitvector_48_dec_of_regval : register_value -> maybe (mword ty48)

let bitvector_48_dec_of_regval merge_var =
   match merge_var with | Regval_bitvector_48_dec (v) -> Just v | _ -> Nothing end

val regval_of_bitvector_48_dec : mword ty48 -> register_value

let regval_of_bitvector_48_dec v = Regval_bitvector_48_dec v

val bitvector_63_dec_of_regval : register_value -> maybe (mword ty63)

let bitvector_63_dec_of_regval merge_var =
   match merge_var with | Regval_bitvector_63_dec (v) -> Just v | _ -> Nothing end

val regval_of_bitvector_63_dec : mword ty63 -> register_value

let regval_of_bitvector_63_dec v = Regval_bitvector_63_dec v

val bitvector_64_dec_of_regval : register_value -> maybe (mword ty64)

let bitvector_64_dec_of_regval merge_var =
   match merge_var with | Regval_bitvector_64_dec (v) -> Just v | _ -> Nothing end

val regval_of_bitvector_64_dec : mword ty64 -> register_value

let regval_of_bitvector_64_dec v = Regval_bitvector_64_dec v

val instr_ast_of_regval : register_value -> maybe instr_ast

let instr_ast_of_regval merge_var =
   match merge_var with | Regval_instr_ast (v) -> Just v | _ -> Nothing end

val regval_of_instr_ast : instr_ast -> register_value

let regval_of_instr_ast v = Regval_instr_ast v

val signal_of_regval : register_value -> maybe signal

let signal_of_regval merge_var =
   match merge_var with | Regval_signal (v) -> Just v | _ -> Nothing end

val regval_of_signal : signal -> register_value

let regval_of_signal v = Regval_signal v



val bool_of_register_value : register_value -> maybe bool
let bool_of_register_value rv = match rv with Regval_bool v -> Just v | _ -> Nothing end
val register_value_of_bool : bool -> register_value
let register_value_of_bool v = Regval_bool v
val int_of_register_value : register_value -> maybe integer
let int_of_register_value rv = match rv with Regval_int v -> Just v | _ -> Nothing end
val register_value_of_int : integer -> register_value
let register_value_of_int v = Regval_int v
val real_of_register_value : register_value -> maybe real
let real_of_register_value rv = match rv with Regval_real v -> Just v | _ -> Nothing end
val register_value_of_real : real -> register_value
let register_value_of_real v = Regval_real v
val string_of_register_value : register_value -> maybe string
let string_of_register_value rv = match rv with Regval_string v -> Just v | _ -> Nothing end
val register_value_of_string : string -> register_value
let register_value_of_string v = Regval_string v

instance (Register_Value register_value)
let bool_of_regval = bool_of_register_value
let regval_of_bool = register_value_of_bool
let int_of_regval = int_of_register_value
let regval_of_int = register_value_of_int
let real_of_regval = real_of_register_value
let regval_of_real = register_value_of_real
let string_of_regval = string_of_register_value
let regval_of_string = register_value_of_string
end
val vector_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)
let vector_of_regval of_regval rv = match rv with
  | Regval_vector v -> just_list (List.map of_regval v)
  | _ -> Nothing
end

val regval_of_vector : forall 'a. ('a -> register_value) -> list 'a -> register_value
let regval_of_vector regval_of xs = Regval_vector (List.map regval_of xs)

val list_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)
let list_of_regval of_regval rv = match rv with
  | Regval_list v -> just_list (List.map of_regval v)
  | _ -> Nothing
end

val regval_of_list : forall 'a. ('a -> register_value) -> list 'a -> register_value
let regval_of_list regval_of xs = Regval_list (List.map regval_of xs)

val option_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (maybe 'a)
let option_of_regval of_regval rv = match rv with
  | Regval_option v -> Just (Maybe.bind v of_regval)
  | _ -> Nothing
end

val regval_of_option : forall 'a. ('a -> register_value) -> maybe 'a -> register_value
let regval_of_option regval_of v = Regval_option (Maybe.map regval_of v)


let __highest_el_aarch32_ref  : register_ref regstate register_value (bool) = <|
  name = "__highest_el_aarch32";
  read_from = (fun s -> s.bool_reg "__highest_el_aarch32");
  write_to = (fun v s -> (<| s with bool_reg =
  (fun reg -> if reg = "__highest_el_aarch32" then v else s.bool_reg reg) |>));
  of_regval = (fun v -> bool_of_register_value v);
  regval_of = (fun v -> register_value_of_bool v) |>

let __ThisInstrAbstract_ref  : register_ref regstate register_value (instr_ast) = <|
  name = "__ThisInstrAbstract";
  read_from = (fun s -> s.instr_ast_reg "__ThisInstrAbstract");
  write_to = (fun v s -> (<| s with instr_ast_reg =
  (fun reg -> if reg = "__ThisInstrAbstract" then v else s.instr_ast_reg reg) |>));
  of_regval = (fun v -> instr_ast_of_regval v);
  regval_of = (fun v -> regval_of_instr_ast v) |>

let __ThisInstrEnc_ref  : register_ref regstate register_value (__InstrEnc) = <|
  name = "__ThisInstrEnc";
  read_from = (fun s -> s.__InstrEnc_reg "__ThisInstrEnc");
  write_to = (fun v s -> (<| s with __InstrEnc_reg =
  (fun reg -> if reg = "__ThisInstrEnc" then v else s.__InstrEnc_reg reg) |>));
  of_regval = (fun v -> __InstrEnc_of_regval v);
  regval_of = (fun v -> regval_of___InstrEnc v) |>

let __CNTControlBase_ref  : register_ref regstate register_value (mword ty48) = <|
  name = "__CNTControlBase";
  read_from = (fun s -> s.bitvector_48_dec_reg "__CNTControlBase");
  write_to = (fun v s -> (<| s with bitvector_48_dec_reg =
  (fun reg -> if reg = "__CNTControlBase" then v else s.bitvector_48_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_48_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_48_dec v) |>

let EventRegister_ref  : register_ref regstate register_value (mword ty1) = <|
  name = "EventRegister";
  read_from = (fun s -> s.bitvector_1_dec_reg "EventRegister");
  write_to = (fun v s -> (<| s with bitvector_1_dec_reg =
  (fun reg -> if reg = "EventRegister" then v else s.bitvector_1_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_1_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_1_dec v) |>

let __saved_exception_level_ref  : register_ref regstate register_value (mword ty2) = <|
  name = "__saved_exception_level";
  read_from = (fun s -> s.bitvector_2_dec_reg "__saved_exception_level");
  write_to = (fun v s -> (<| s with bitvector_2_dec_reg =
  (fun reg -> if reg = "__saved_exception_level" then v else s.bitvector_2_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_2_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_2_dec v) |>

let SP_EL3_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "SP_EL3";
  read_from = (fun s -> s.bitvector_129_dec_reg "SP_EL3");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "SP_EL3" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _V_ref  : register_ref regstate register_value (list (mword ty128)) = <|
  name = "_V";
  read_from = (fun s -> s.vector_32_inc_bitvector_128_dec_reg "_V");
  write_to = (fun v s -> (<| s with vector_32_inc_bitvector_128_dec_reg =
  (fun reg -> if reg = "_V" then v else s.vector_32_inc_bitvector_128_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_128_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_128_dec v) v) |>

let PMSWINC_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMSWINC_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMSWINC_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMSWINC_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let OSLAR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "OSLAR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "OSLAR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "OSLAR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_SGI1R_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ICC_SGI1R_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ICC_SGI1R_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ICC_SGI1R_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ICC_SGI0R_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ICC_SGI0R_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ICC_SGI0R_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ICC_SGI0R_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ICV_EOIR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_EOIR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_EOIR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_EOIR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_EOIR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_EOIR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_EOIR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_EOIR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_EOIR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_EOIR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_EOIR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_EOIR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_EOIR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_EOIR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_EOIR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_EOIR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_DIR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_DIR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_DIR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_DIR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_DIR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_DIR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_DIR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_DIR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_ASGI1R_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ICC_ASGI1R_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ICC_ASGI1R_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ICC_ASGI1R_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let DBGDTRTX_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "DBGDTRTX_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "DBGDTRTX_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "DBGDTRTX_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let RDDC_EL0_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "RDDC_EL0";
  read_from = (fun s -> s.bitvector_129_dec_reg "RDDC_EL0");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "RDDC_EL0" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let DDC_EL3_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "DDC_EL3";
  read_from = (fun s -> s.bitvector_129_dec_reg "DDC_EL3");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "DDC_EL3" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let DDC_EL2_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "DDC_EL2";
  read_from = (fun s -> s.bitvector_129_dec_reg "DDC_EL2");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "DDC_EL2" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let DDC_EL1_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "DDC_EL1";
  read_from = (fun s -> s.bitvector_129_dec_reg "DDC_EL1");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "DDC_EL1" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let DDC_EL0_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "DDC_EL0";
  read_from = (fun s -> s.bitvector_129_dec_reg "DDC_EL0");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "DDC_EL0" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let VTTBR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "VTTBR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "VTTBR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "VTTBR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let VTCR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "VTCR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "VTCR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "VTCR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let VSESR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "VSESR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "VSESR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "VSESR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let TTBR1_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "TTBR1_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "TTBR1_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "TTBR1_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let TTBR1_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "TTBR1_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "TTBR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "TTBR1_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let TTBR0_EL3_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "TTBR0_EL3";
  read_from = (fun s -> s.bitvector_64_dec_reg "TTBR0_EL3");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "TTBR0_EL3" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let TTBR0_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "TTBR0_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "TTBR0_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "TTBR0_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let TTBR0_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "TTBR0_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "TTBR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "TTBR0_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let TPIDR_EL3_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "TPIDR_EL3";
  read_from = (fun s -> s.bitvector_129_dec_reg "TPIDR_EL3");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "TPIDR_EL3" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let TPIDR_EL2_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "TPIDR_EL2";
  read_from = (fun s -> s.bitvector_129_dec_reg "TPIDR_EL2");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "TPIDR_EL2" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let TPIDR_EL1_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "TPIDR_EL1";
  read_from = (fun s -> s.bitvector_129_dec_reg "TPIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "TPIDR_EL1" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let TPIDR_EL0_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "TPIDR_EL0";
  read_from = (fun s -> s.bitvector_129_dec_reg "TPIDR_EL0");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "TPIDR_EL0" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let TPIDRRO_EL0_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "TPIDRRO_EL0";
  read_from = (fun s -> s.bitvector_129_dec_reg "TPIDRRO_EL0");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "TPIDRRO_EL0" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let SP_EL2_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "SP_EL2";
  read_from = (fun s -> s.bitvector_129_dec_reg "SP_EL2");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "SP_EL2" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let SP_EL1_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "SP_EL1";
  read_from = (fun s -> s.bitvector_129_dec_reg "SP_EL1");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "SP_EL1" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let SP_EL0_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "SP_EL0";
  read_from = (fun s -> s.bitvector_129_dec_reg "SP_EL0");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "SP_EL0" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let SPSR_und_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "SPSR_und";
  read_from = (fun s -> s.bitvector_32_dec_reg "SPSR_und");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "SPSR_und" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let SPSR_irq_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "SPSR_irq";
  read_from = (fun s -> s.bitvector_32_dec_reg "SPSR_irq");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "SPSR_irq" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let SPSR_fiq_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "SPSR_fiq";
  read_from = (fun s -> s.bitvector_32_dec_reg "SPSR_fiq");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "SPSR_fiq" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let SPSR_abt_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "SPSR_abt";
  read_from = (fun s -> s.bitvector_32_dec_reg "SPSR_abt");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "SPSR_abt" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let SDER32_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "SDER32_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "SDER32_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "SDER32_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let SCXTNUM_EL3_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "SCXTNUM_EL3";
  read_from = (fun s -> s.bitvector_64_dec_reg "SCXTNUM_EL3");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "SCXTNUM_EL3" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let SCXTNUM_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "SCXTNUM_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "SCXTNUM_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "SCXTNUM_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let SCXTNUM_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "SCXTNUM_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "SCXTNUM_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "SCXTNUM_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CID_EL0_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "CID_EL0";
  read_from = (fun s -> s.bitvector_129_dec_reg "CID_EL0");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "CID_EL0" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let S3_op1_Cn_Cm_op2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "S3_op1_Cn_Cm_op2";
  read_from = (fun s -> s.bitvector_64_dec_reg "S3_op1_Cn_Cm_op2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "S3_op1_Cn_Cm_op2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let RVBAR_EL3_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "RVBAR_EL3";
  read_from = (fun s -> s.bitvector_64_dec_reg "RVBAR_EL3");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "RVBAR_EL3" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let RVBAR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "RVBAR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "RVBAR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "RVBAR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let RVBAR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "RVBAR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "RVBAR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "RVBAR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let RTPIDR_EL0_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "RTPIDR_EL0";
  read_from = (fun s -> s.bitvector_129_dec_reg "RTPIDR_EL0");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "RTPIDR_EL0" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let RSP_EL0_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "RSP_EL0";
  read_from = (fun s -> s.bitvector_129_dec_reg "RSP_EL0");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "RSP_EL0" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let RMR_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "RMR_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "RMR_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "RMR_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let RMR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "RMR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "RMR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "RMR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let RMR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "RMR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "RMR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "RMR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let REVIDR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "REVIDR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "REVIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "REVIDR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let PMXEVTYPER_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMXEVTYPER_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMXEVTYPER_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMXEVTYPER_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMXEVCNTR_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMXEVCNTR_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMXEVCNTR_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMXEVCNTR_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMSLATFR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMSLATFR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMSLATFR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMSLATFR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMSIRR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMSIRR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMSIRR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMSIRR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMSIDR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMSIDR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMSIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMSIDR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMSICR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "PMSICR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "PMSICR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "PMSICR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let PMSFCR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMSFCR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMSFCR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMSFCR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMSEVFR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "PMSEVFR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "PMSEVFR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "PMSEVFR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let PMSELR_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMSELR_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMSELR_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMSELR_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMSCR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMSCR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMSCR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMSCR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMSCR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMSCR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMSCR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMSCR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMOVSSET_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMOVSSET_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMOVSSET_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMOVSSET_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMOVSCLR_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMOVSCLR_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMOVSCLR_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMOVSCLR_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMINTENSET_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMINTENSET_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMINTENSET_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMINTENSET_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMINTENCLR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMINTENCLR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMINTENCLR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMINTENCLR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMEVTYPER_EL0_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "PMEVTYPER_EL0";
  read_from = (fun s -> s.vector_31_inc_bitvector_32_dec_reg "PMEVTYPER_EL0");
  write_to = (fun v s -> (<| s with vector_31_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "PMEVTYPER_EL0" then v else s.vector_31_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let PMEVCNTR_EL0_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "PMEVCNTR_EL0";
  read_from = (fun s -> s.vector_31_inc_bitvector_32_dec_reg "PMEVCNTR_EL0");
  write_to = (fun v s -> (<| s with vector_31_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "PMEVCNTR_EL0" then v else s.vector_31_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let PMCR_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMCR_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMCR_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMCR_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMCNTENSET_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMCNTENSET_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMCNTENSET_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMCNTENSET_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMCNTENCLR_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMCNTENCLR_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMCNTENCLR_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMCNTENCLR_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMCEID1_EL0_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "PMCEID1_EL0";
  read_from = (fun s -> s.bitvector_64_dec_reg "PMCEID1_EL0");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "PMCEID1_EL0" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let PMCEID0_EL0_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "PMCEID0_EL0";
  read_from = (fun s -> s.bitvector_64_dec_reg "PMCEID0_EL0");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "PMCEID0_EL0" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let PMCCNTR_EL0_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "PMCCNTR_EL0";
  read_from = (fun s -> s.bitvector_64_dec_reg "PMCCNTR_EL0");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "PMCCNTR_EL0" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let PMUSERENR_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMUSERENR_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMUSERENR_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMUSERENR_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMCCFILTR_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMCCFILTR_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMCCFILTR_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMCCFILTR_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMBSR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMBSR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMBSR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMBSR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PMBPTR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "PMBPTR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "PMBPTR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "PMBPTR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let PMBLIMITR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "PMBLIMITR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "PMBLIMITR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "PMBLIMITR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let PMBIDR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "PMBIDR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "PMBIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "PMBIDR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PAR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "PAR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "PAR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "PAR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let OSECCR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "OSECCR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "OSECCR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "OSECCR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let OSDTRTX_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "OSDTRTX_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "OSDTRTX_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "OSDTRTX_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let OSDTRRX_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "OSDTRRX_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "OSDTRRX_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "OSDTRRX_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let MVFR2_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "MVFR2_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "MVFR2_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "MVFR2_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let MVFR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "MVFR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "MVFR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "MVFR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let MVFR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "MVFR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "MVFR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "MVFR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let VMPIDR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "VMPIDR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "VMPIDR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "VMPIDR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPIDR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPIDR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPIDR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPAMVPMV_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "MPAMVPMV_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "MPAMVPMV_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "MPAMVPMV_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let MPAMVPM7_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPAMVPM7_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPAMVPM7_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPAMVPM7_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPAMVPM6_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPAMVPM6_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPAMVPM6_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPAMVPM6_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPAMVPM5_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPAMVPM5_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPAMVPM5_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPAMVPM5_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPAMVPM4_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPAMVPM4_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPAMVPM4_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPAMVPM4_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPAMVPM3_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPAMVPM3_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPAMVPM3_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPAMVPM3_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPAMVPM2_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPAMVPM2_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPAMVPM2_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPAMVPM2_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPAMVPM1_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPAMVPM1_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPAMVPM1_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPAMVPM1_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPAMVPM0_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPAMVPM0_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPAMVPM0_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPAMVPM0_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPAMIDR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPAMIDR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPAMIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPAMIDR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPAMHCR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "MPAMHCR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "MPAMHCR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "MPAMHCR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let _MPAM1_EL1_0_62_ref  : register_ref regstate register_value (mword ty63) = <|
  name = "_MPAM1_EL1_0_62";
  read_from = (fun s -> s.bitvector_63_dec_reg "_MPAM1_EL1_0_62");
  write_to = (fun v s -> (<| s with bitvector_63_dec_reg =
  (fun reg -> if reg = "_MPAM1_EL1_0_62" then v else s.bitvector_63_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_63_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_63_dec v) |>

let _MPAM2_EL2_0_62_ref  : register_ref regstate register_value (mword ty63) = <|
  name = "_MPAM2_EL2_0_62";
  read_from = (fun s -> s.bitvector_63_dec_reg "_MPAM2_EL2_0_62");
  write_to = (fun v s -> (<| s with bitvector_63_dec_reg =
  (fun reg -> if reg = "_MPAM2_EL2_0_62" then v else s.bitvector_63_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_63_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_63_dec v) |>

let MPAM3_EL3_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPAM3_EL3";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPAM3_EL3");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPAM3_EL3" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MPAM0_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MPAM0_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "MPAM0_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MPAM0_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let VPIDR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "VPIDR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "VPIDR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "VPIDR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let MIDR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "MIDR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "MIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "MIDR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let MDRAR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MDRAR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "MDRAR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MDRAR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MDCCSR_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "MDCCSR_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "MDCCSR_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "MDCCSR_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let MDCCINT_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "MDCCINT_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "MDCCINT_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "MDCCINT_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let MAIR_EL3_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MAIR_EL3";
  read_from = (fun s -> s.bitvector_64_dec_reg "MAIR_EL3");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MAIR_EL3" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MAIR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MAIR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "MAIR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MAIR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let MAIR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "MAIR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "MAIR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "MAIR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let LORSA_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "LORSA_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "LORSA_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "LORSA_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let LORN_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "LORN_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "LORN_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "LORN_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let LORID_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "LORID_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "LORID_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "LORID_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let LOREA_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "LOREA_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "LOREA_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "LOREA_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let LORC_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "LORC_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "LORC_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "LORC_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ISR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ISR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ISR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ISR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let IFSR32_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "IFSR32_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "IFSR32_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "IFSR32_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_PFR2_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_PFR2_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_PFR2_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_PFR2_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_PFR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_PFR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_PFR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_PFR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_PFR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_PFR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_PFR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_PFR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_MMFR5_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_MMFR5_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_MMFR5_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_MMFR5_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_MMFR4_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_MMFR4_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_MMFR4_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_MMFR4_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_MMFR3_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_MMFR3_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_MMFR3_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_MMFR3_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_MMFR2_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_MMFR2_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_MMFR2_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_MMFR2_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_MMFR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_MMFR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_MMFR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_MMFR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_MMFR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_MMFR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_MMFR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_MMFR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_ISAR6_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_ISAR6_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_ISAR6_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_ISAR6_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_ISAR5_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_ISAR5_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_ISAR5_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_ISAR5_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_ISAR4_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_ISAR4_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_ISAR4_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_ISAR4_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_ISAR3_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_ISAR3_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_ISAR3_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_ISAR3_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_ISAR2_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_ISAR2_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_ISAR2_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_ISAR2_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_ISAR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_ISAR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_ISAR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_ISAR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_ISAR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_ISAR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_ISAR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_ISAR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_DFR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_DFR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_DFR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_DFR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_AFR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_AFR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_AFR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_AFR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_AA64ZFR0_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ID_AA64ZFR0_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ID_AA64ZFR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ID_AA64ZFR0_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ID_AA64PFR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_AA64PFR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_AA64PFR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_AA64PFR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_AA64PFR0_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ID_AA64PFR0_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ID_AA64PFR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ID_AA64PFR0_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ID_AA64MMFR2_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ID_AA64MMFR2_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ID_AA64MMFR2_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ID_AA64MMFR2_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ID_AA64MMFR1_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ID_AA64MMFR1_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ID_AA64MMFR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ID_AA64MMFR1_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ID_AA64MMFR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_AA64MMFR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_AA64MMFR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_AA64MMFR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_AA64ISAR1_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ID_AA64ISAR1_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ID_AA64ISAR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ID_AA64ISAR1_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ID_AA64ISAR0_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ID_AA64ISAR0_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ID_AA64ISAR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ID_AA64ISAR0_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ID_AA64DFR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_AA64DFR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_AA64DFR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_AA64DFR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_AA64DFR0_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ID_AA64DFR0_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ID_AA64DFR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ID_AA64DFR0_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ID_AA64AFR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_AA64AFR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_AA64AFR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_AA64AFR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ID_AA64AFR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ID_AA64AFR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ID_AA64AFR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ID_AA64AFR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICH_VTR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICH_VTR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICH_VTR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICH_VTR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICH_VMCR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICH_VMCR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICH_VMCR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICH_VMCR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICH_MISR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICH_MISR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICH_MISR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICH_MISR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICH_LR_EL2_ref  : register_ref regstate register_value (list (mword ty64)) = <|
  name = "ICH_LR_EL2";
  read_from = (fun s -> s.vector_16_inc_bitvector_64_dec_reg "ICH_LR_EL2");
  write_to = (fun v s -> (<| s with vector_16_inc_bitvector_64_dec_reg =
  (fun reg -> if reg = "ICH_LR_EL2" then v else s.vector_16_inc_bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_64_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_64_dec v) v) |>

let ICH_ELRSR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICH_ELRSR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICH_ELRSR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICH_ELRSR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICH_EISR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICH_EISR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICH_EISR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICH_EISR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICH_AP1R_EL2_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "ICH_AP1R_EL2";
  read_from = (fun s -> s.vector_4_inc_bitvector_32_dec_reg "ICH_AP1R_EL2");
  write_to = (fun v s -> (<| s with vector_4_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "ICH_AP1R_EL2" then v else s.vector_4_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let ICH_AP0R_EL2_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "ICH_AP0R_EL2";
  read_from = (fun s -> s.vector_4_inc_bitvector_32_dec_reg "ICH_AP0R_EL2");
  write_to = (fun v s -> (<| s with vector_4_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "ICH_AP0R_EL2" then v else s.vector_4_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let ICV_RPR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_RPR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_RPR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_RPR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_RPR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_RPR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_RPR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_RPR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_PMR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_PMR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_PMR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_PMR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_PMR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_PMR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_PMR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_PMR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_IGRPEN1_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_IGRPEN1_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_IGRPEN1_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_IGRPEN1_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_IGRPEN1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_IGRPEN1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_IGRPEN1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_IGRPEN1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_IGRPEN1_EL1_S_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_IGRPEN1_EL1_S";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_IGRPEN1_EL1_S");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_IGRPEN1_EL1_S" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_IGRPEN1_EL1_NS_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_IGRPEN1_EL1_NS";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_IGRPEN1_EL1_NS");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_IGRPEN1_EL1_NS" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_IGRPEN0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_IGRPEN0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_IGRPEN0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_IGRPEN0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_IGRPEN0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_IGRPEN0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_IGRPEN0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_IGRPEN0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_IAR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_IAR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_IAR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_IAR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_IAR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_IAR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_IAR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_IAR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_IAR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_IAR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_IAR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_IAR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_IAR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_IAR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_IAR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_IAR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_HPPIR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_HPPIR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_HPPIR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_HPPIR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_HPPIR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_HPPIR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_HPPIR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_HPPIR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_HPPIR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_HPPIR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_HPPIR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_HPPIR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_HPPIR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_HPPIR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_HPPIR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_HPPIR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_CTLR_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_CTLR_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_CTLR_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_CTLR_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_CTLR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_CTLR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_CTLR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_CTLR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_CTLR_EL1_S_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_CTLR_EL1_S";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_CTLR_EL1_S");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_CTLR_EL1_S" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_CTLR_EL1_NS_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_CTLR_EL1_NS";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_CTLR_EL1_NS");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_CTLR_EL1_NS" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_BPR1_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_BPR1_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_BPR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_BPR1_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_BPR1_EL1_S_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_BPR1_EL1_S";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_BPR1_EL1_S");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_BPR1_EL1_S" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_BPR1_EL1_NS_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_BPR1_EL1_NS";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_BPR1_EL1_NS");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_BPR1_EL1_NS" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_BPR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICV_BPR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICV_BPR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_BPR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_BPR0_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_BPR0_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_BPR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_BPR0_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICV_AP1R_EL1_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "ICV_AP1R_EL1";
  read_from = (fun s -> s.vector_4_inc_bitvector_32_dec_reg "ICV_AP1R_EL1");
  write_to = (fun v s -> (<| s with vector_4_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_AP1R_EL1" then v else s.vector_4_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let ICC_AP1R_EL1_S_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "ICC_AP1R_EL1_S";
  read_from = (fun s -> s.vector_4_inc_bitvector_32_dec_reg "ICC_AP1R_EL1_S");
  write_to = (fun v s -> (<| s with vector_4_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_AP1R_EL1_S" then v else s.vector_4_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let ICC_AP1R_EL1_NS_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "ICC_AP1R_EL1_NS";
  read_from = (fun s -> s.vector_4_inc_bitvector_32_dec_reg "ICC_AP1R_EL1_NS");
  write_to = (fun v s -> (<| s with vector_4_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_AP1R_EL1_NS" then v else s.vector_4_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let ICC_AP1R_EL1_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "ICC_AP1R_EL1";
  read_from = (fun s -> s.vector_4_inc_bitvector_32_dec_reg "ICC_AP1R_EL1");
  write_to = (fun v s -> (<| s with vector_4_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_AP1R_EL1" then v else s.vector_4_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let ICV_AP0R_EL1_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "ICV_AP0R_EL1";
  read_from = (fun s -> s.vector_4_inc_bitvector_32_dec_reg "ICV_AP0R_EL1");
  write_to = (fun v s -> (<| s with vector_4_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "ICV_AP0R_EL1" then v else s.vector_4_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let ICH_HCR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICH_HCR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICH_HCR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICH_HCR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_SRE_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_SRE_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_SRE_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_SRE_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_SRE_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_SRE_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_SRE_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_SRE_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_SRE_EL1_S_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_SRE_EL1_S";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_SRE_EL1_S");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_SRE_EL1_S" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_SRE_EL1_NS_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ICC_SRE_EL1_NS";
  read_from = (fun s -> s.bitvector_32_dec_reg "ICC_SRE_EL1_NS");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_SRE_EL1_NS" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ICC_AP0R_EL1_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "ICC_AP0R_EL1";
  read_from = (fun s -> s.vector_4_inc_bitvector_32_dec_reg "ICC_AP0R_EL1");
  write_to = (fun v s -> (<| s with vector_4_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "ICC_AP0R_EL1" then v else s.vector_4_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let HSTR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "HSTR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "HSTR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "HSTR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let HACR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "HACR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "HACR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "HACR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let FPSR_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "FPSR";
  read_from = (fun s -> s.bitvector_32_dec_reg "FPSR");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "FPSR" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let FPEXC32_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "FPEXC32_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "FPEXC32_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "FPEXC32_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let FPCR_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "FPCR";
  read_from = (fun s -> s.bitvector_32_dec_reg "FPCR");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "FPCR" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ERXSTATUS_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ERXSTATUS_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ERXSTATUS_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ERXSTATUS_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ERXMISC1_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ERXMISC1_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ERXMISC1_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ERXMISC1_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ERXMISC0_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ERXMISC0_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ERXMISC0_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ERXMISC0_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ERXFR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ERXFR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ERXFR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ERXFR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ERXCTLR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ERXCTLR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ERXCTLR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ERXCTLR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ERXADDR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ERXADDR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ERXADDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ERXADDR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ERRSELR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ERRSELR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ERRSELR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ERRSELR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ERRIDR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ERRIDR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ERRIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ERRIDR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let VDISR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "VDISR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "VDISR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "VDISR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let DISR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "DISR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "DISR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "DISR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let DCZID_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "DCZID_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "DCZID_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "DCZID_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let DBGWVR_EL1_ref  : register_ref regstate register_value (list (mword ty64)) = <|
  name = "DBGWVR_EL1";
  read_from = (fun s -> s.vector_16_inc_bitvector_64_dec_reg "DBGWVR_EL1");
  write_to = (fun v s -> (<| s with vector_16_inc_bitvector_64_dec_reg =
  (fun reg -> if reg = "DBGWVR_EL1" then v else s.vector_16_inc_bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_64_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_64_dec v) v) |>

let DBGWCR_EL1_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "DBGWCR_EL1";
  read_from = (fun s -> s.vector_16_inc_bitvector_32_dec_reg "DBGWCR_EL1");
  write_to = (fun v s -> (<| s with vector_16_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "DBGWCR_EL1" then v else s.vector_16_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let DBGVCR32_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "DBGVCR32_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "DBGVCR32_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "DBGVCR32_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CDBGDTR_EL0_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "CDBGDTR_EL0";
  read_from = (fun s -> s.bitvector_129_dec_reg "CDBGDTR_EL0");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "CDBGDTR_EL0" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let MDSCR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "MDSCR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "MDSCR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "MDSCR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let DBGDTRRX_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "DBGDTRRX_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "DBGDTRRX_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "DBGDTRRX_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let DBGCLAIMSET_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "DBGCLAIMSET_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "DBGCLAIMSET_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "DBGCLAIMSET_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let DBGCLAIMCLR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "DBGCLAIMCLR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "DBGCLAIMCLR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "DBGCLAIMCLR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let DBGBVR_EL1_ref  : register_ref regstate register_value (list (mword ty64)) = <|
  name = "DBGBVR_EL1";
  read_from = (fun s -> s.vector_16_inc_bitvector_64_dec_reg "DBGBVR_EL1");
  write_to = (fun v s -> (<| s with vector_16_inc_bitvector_64_dec_reg =
  (fun reg -> if reg = "DBGBVR_EL1" then v else s.vector_16_inc_bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_64_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_64_dec v) v) |>

let OSLSR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "OSLSR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "OSLSR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "OSLSR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let OSDLR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "OSDLR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "OSDLR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "OSDLR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let DBGPRCR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "DBGPRCR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "DBGPRCR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "DBGPRCR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let SPIDEN_ref  : register_ref regstate register_value (signal) = <|
  name = "SPIDEN";
  read_from = (fun s -> s.signal_reg "SPIDEN");
  write_to = (fun v s -> (<| s with signal_reg =
  (fun reg -> if reg = "SPIDEN" then v else s.signal_reg reg) |>));
  of_regval = (fun v -> signal_of_regval v);
  regval_of = (fun v -> regval_of_signal v) |>

let DBGEN_ref  : register_ref regstate register_value (signal) = <|
  name = "DBGEN";
  read_from = (fun s -> s.signal_reg "DBGEN");
  write_to = (fun v s -> (<| s with signal_reg =
  (fun reg -> if reg = "DBGEN" then v else s.signal_reg reg) |>));
  of_regval = (fun v -> signal_of_regval v);
  regval_of = (fun v -> regval_of_signal v) |>

let DSPSR_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "DSPSR_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "DSPSR_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "DSPSR_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CDLR_EL0_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "CDLR_EL0";
  read_from = (fun s -> s.bitvector_129_dec_reg "CDLR_EL0");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "CDLR_EL0" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let DBGBCR_EL1_ref  : register_ref regstate register_value (list (mword ty32)) = <|
  name = "DBGBCR_EL1";
  read_from = (fun s -> s.vector_16_inc_bitvector_32_dec_reg "DBGBCR_EL1");
  write_to = (fun v s -> (<| s with vector_16_inc_bitvector_32_dec_reg =
  (fun reg -> if reg = "DBGBCR_EL1" then v else s.vector_16_inc_bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bitvector_32_dec_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bitvector_32_dec v) v) |>

let MDCR_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "MDCR_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "MDCR_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "MDCR_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let MDCR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "MDCR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "MDCR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "MDCR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let DBGAUTHSTATUS_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "DBGAUTHSTATUS_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "DBGAUTHSTATUS_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "DBGAUTHSTATUS_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let DACR32_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "DACR32_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "DACR32_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "DACR32_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CTR_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CTR_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "CTR_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CTR_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CSSELR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CSSELR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "CSSELR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CSSELR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CSCR_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CSCR_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "CSCR_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CSCR_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CONTEXTIDR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CONTEXTIDR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CONTEXTIDR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CONTEXTIDR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CONTEXTIDR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CONTEXTIDR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "CONTEXTIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CONTEXTIDR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTV_TVAL_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTV_TVAL_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTV_TVAL_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTV_TVAL_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTV_CVAL_EL0_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "CNTV_CVAL_EL0";
  read_from = (fun s -> s.bitvector_64_dec_reg "CNTV_CVAL_EL0");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "CNTV_CVAL_EL0" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CNTV_CTL_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTV_CTL_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTV_CTL_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTV_CTL_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTVOFF_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "CNTVOFF_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "CNTVOFF_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "CNTVOFF_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CNTVCT_EL0_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "CNTVCT_EL0";
  read_from = (fun s -> s.bitvector_64_dec_reg "CNTVCT_EL0");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "CNTVCT_EL0" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CNTP_TVAL_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTP_TVAL_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTP_TVAL_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTP_TVAL_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTP_CVAL_EL0_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "CNTP_CVAL_EL0";
  read_from = (fun s -> s.bitvector_64_dec_reg "CNTP_CVAL_EL0");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "CNTP_CVAL_EL0" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CNTP_CTL_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTP_CTL_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTP_CTL_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTP_CTL_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTPS_TVAL_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTPS_TVAL_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTPS_TVAL_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTPS_TVAL_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTPS_CVAL_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "CNTPS_CVAL_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "CNTPS_CVAL_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "CNTPS_CVAL_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CNTPS_CTL_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTPS_CTL_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTPS_CTL_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTPS_CTL_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTPCT_EL0_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "CNTPCT_EL0";
  read_from = (fun s -> s.bitvector_64_dec_reg "CNTPCT_EL0");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "CNTPCT_EL0" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CNTHV_TVAL_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTHV_TVAL_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTHV_TVAL_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTHV_TVAL_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTHV_CVAL_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "CNTHV_CVAL_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "CNTHV_CVAL_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "CNTHV_CVAL_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CNTHV_CTL_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTHV_CTL_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTHV_CTL_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTHV_CTL_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTHP_TVAL_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTHP_TVAL_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTHP_TVAL_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTHP_TVAL_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTHP_CVAL_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "CNTHP_CVAL_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "CNTHP_CVAL_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "CNTHP_CVAL_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CNTHP_CTL_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTHP_CTL_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTHP_CTL_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTHP_CTL_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTKCTL_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTKCTL_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTKCTL_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTKCTL_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTHCTL_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTHCTL_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTHCTL_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTHCTL_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTFRQ_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTFRQ_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTFRQ_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTFRQ_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CLIDR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "CLIDR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "CLIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "CLIDR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CHCR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CHCR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CHCR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CHCR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CCSIDR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CCSIDR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "CCSIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CCSIDR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let AMAIR_EL3_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "AMAIR_EL3";
  read_from = (fun s -> s.bitvector_64_dec_reg "AMAIR_EL3");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "AMAIR_EL3" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let AMAIR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "AMAIR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "AMAIR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "AMAIR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let AMAIR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "AMAIR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "AMAIR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "AMAIR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let AIDR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "AIDR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "AIDR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "AIDR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let AFSR1_EL3_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "AFSR1_EL3";
  read_from = (fun s -> s.bitvector_64_dec_reg "AFSR1_EL3");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "AFSR1_EL3" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let AFSR1_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "AFSR1_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "AFSR1_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "AFSR1_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let AFSR1_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "AFSR1_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "AFSR1_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "AFSR1_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let AFSR0_EL3_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "AFSR0_EL3";
  read_from = (fun s -> s.bitvector_64_dec_reg "AFSR0_EL3");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "AFSR0_EL3" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let AFSR0_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "AFSR0_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "AFSR0_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "AFSR0_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let AFSR0_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "AFSR0_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "AFSR0_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "AFSR0_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ACTLR_EL3_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ACTLR_EL3";
  read_from = (fun s -> s.bitvector_64_dec_reg "ACTLR_EL3");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ACTLR_EL3" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ACTLR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ACTLR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "ACTLR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ACTLR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ACTLR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "ACTLR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "ACTLR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "ACTLR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let SPSR_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "SPSR_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "SPSR_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "SPSR_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let SPSR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "SPSR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "SPSR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "SPSR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let SPSR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "SPSR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "SPSR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "SPSR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let SCTLR_EL3_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "SCTLR_EL3";
  read_from = (fun s -> s.bitvector_64_dec_reg "SCTLR_EL3");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "SCTLR_EL3" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let SCTLR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "SCTLR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "SCTLR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "SCTLR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let SCTLR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "SCTLR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "SCTLR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "SCTLR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let EDSCR_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "EDSCR";
  read_from = (fun s -> s.bitvector_32_dec_reg "EDSCR");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "EDSCR" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CPTR_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CPTR_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "CPTR_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CPTR_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CPTR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CPTR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CPTR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CPTR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CPACR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CPACR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "CPACR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CPACR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let VBAR_EL3_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "VBAR_EL3";
  read_from = (fun s -> s.bitvector_129_dec_reg "VBAR_EL3");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "VBAR_EL3" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let VBAR_EL2_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "VBAR_EL2";
  read_from = (fun s -> s.bitvector_129_dec_reg "VBAR_EL2");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "VBAR_EL2" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let VBAR_EL1_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "VBAR_EL1";
  read_from = (fun s -> s.bitvector_129_dec_reg "VBAR_EL1");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "VBAR_EL1" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let ELR_EL3_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "ELR_EL3";
  read_from = (fun s -> s.bitvector_129_dec_reg "ELR_EL3");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "ELR_EL3" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let ELR_EL2_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "ELR_EL2";
  read_from = (fun s -> s.bitvector_129_dec_reg "ELR_EL2");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "ELR_EL2" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let ELR_EL1_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "ELR_EL1";
  read_from = (fun s -> s.bitvector_129_dec_reg "ELR_EL1");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "ELR_EL1" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let CCTLR_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CCTLR_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "CCTLR_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CCTLR_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CCTLR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CCTLR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CCTLR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CCTLR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CCTLR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CCTLR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "CCTLR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CCTLR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CCTLR_EL0_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CCTLR_EL0";
  read_from = (fun s -> s.bitvector_32_dec_reg "CCTLR_EL0");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CCTLR_EL0" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let __BranchTaken_ref  : register_ref regstate register_value (bool) = <|
  name = "__BranchTaken";
  read_from = (fun s -> s.bool_reg "__BranchTaken");
  write_to = (fun v s -> (<| s with bool_reg =
  (fun reg -> if reg = "__BranchTaken" then v else s.bool_reg reg) |>));
  of_regval = (fun v -> bool_of_register_value v);
  regval_of = (fun v -> register_value_of_bool v) |>

let _PC_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "_PC";
  read_from = (fun s -> s.bitvector_64_dec_reg "_PC");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "_PC" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let TCR_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "TCR_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "TCR_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "TCR_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let TCR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "TCR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "TCR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "TCR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let TCR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "TCR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "TCR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "TCR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let HPFAR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "HPFAR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "HPFAR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "HPFAR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let FAR_EL3_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "FAR_EL3";
  read_from = (fun s -> s.bitvector_64_dec_reg "FAR_EL3");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "FAR_EL3" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let FAR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "FAR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "FAR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "FAR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let FAR_EL1_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "FAR_EL1";
  read_from = (fun s -> s.bitvector_64_dec_reg "FAR_EL1");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "FAR_EL1" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let ESR_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ESR_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "ESR_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ESR_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ESR_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ESR_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "ESR_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ESR_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let ESR_EL1_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "ESR_EL1";
  read_from = (fun s -> s.bitvector_32_dec_reg "ESR_EL1");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "ESR_EL1" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let _R30_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R30";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R30");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R30" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R29_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R29";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R29");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R29" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R28_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R28";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R28");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R28" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R27_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R27";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R27");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R27" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R26_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R26";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R26");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R26" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R25_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R25";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R25");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R25" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R24_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R24";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R24");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R24" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R23_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R23";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R23");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R23" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R22_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R22";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R22");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R22" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R21_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R21";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R21");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R21" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R20_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R20";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R20");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R20" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R19_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R19";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R19");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R19" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R18_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R18";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R18");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R18" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R17_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R17";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R17");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R17" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R16_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R16";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R16");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R16" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R15_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R15";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R15");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R15" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R14_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R14";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R14");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R14" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R13_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R13";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R13");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R13" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R12_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R12";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R12");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R12" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R11_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R11";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R11");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R11" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R10_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R10";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R10");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R10" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R09_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R09";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R09");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R09" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R08_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R08";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R08");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R08" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R07_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R07";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R07");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R07" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R06_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R06";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R06");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R06" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R05_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R05";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R05");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R05" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R04_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R04";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R04");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R04" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R03_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R03";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R03");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R03" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R02_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R02";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R02");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R02" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R01_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R01";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R01");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R01" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let _R00_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "_R00";
  read_from = (fun s -> s.bitvector_129_dec_reg "_R00");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "_R00" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let __ThisInstr_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "__ThisInstr";
  read_from = (fun s -> s.bitvector_32_dec_reg "__ThisInstr");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "__ThisInstr" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PSTATE_ref  : register_ref regstate register_value (ProcState) = <|
  name = "PSTATE";
  read_from = (fun s -> s.ProcState_reg "PSTATE");
  write_to = (fun v s -> (<| s with ProcState_reg =
  (fun reg -> if reg = "PSTATE" then v else s.ProcState_reg reg) |>));
  of_regval = (fun v -> ProcState_of_regval v);
  regval_of = (fun v -> regval_of_ProcState v) |>

let HCR_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "HCR_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "HCR_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "HCR_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let SCR_EL3_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "SCR_EL3";
  read_from = (fun s -> s.bitvector_32_dec_reg "SCR_EL3");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "SCR_EL3" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTHVS_TVAL_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTHVS_TVAL_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTHVS_TVAL_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTHVS_TVAL_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTHVS_CVAL_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "CNTHVS_CVAL_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "CNTHVS_CVAL_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "CNTHVS_CVAL_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CNTHVS_CTL_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTHVS_CTL_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTHVS_CTL_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTHVS_CTL_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTHPS_TVAL_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTHPS_TVAL_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTHPS_TVAL_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTHPS_TVAL_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let CNTHPS_CVAL_EL2_ref  : register_ref regstate register_value (mword ty64) = <|
  name = "CNTHPS_CVAL_EL2";
  read_from = (fun s -> s.bitvector_64_dec_reg "CNTHPS_CVAL_EL2");
  write_to = (fun v s -> (<| s with bitvector_64_dec_reg =
  (fun reg -> if reg = "CNTHPS_CVAL_EL2" then v else s.bitvector_64_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_64_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_64_dec v) |>

let CNTHPS_CTL_EL2_ref  : register_ref regstate register_value (mword ty32) = <|
  name = "CNTHPS_CTL_EL2";
  read_from = (fun s -> s.bitvector_32_dec_reg "CNTHPS_CTL_EL2");
  write_to = (fun v s -> (<| s with bitvector_32_dec_reg =
  (fun reg -> if reg = "CNTHPS_CTL_EL2" then v else s.bitvector_32_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_32_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_32_dec v) |>

let PCC_ref  : register_ref regstate register_value (mword ty129) = <|
  name = "PCC";
  read_from = (fun s -> s.bitvector_129_dec_reg "PCC");
  write_to = (fun v s -> (<| s with bitvector_129_dec_reg =
  (fun reg -> if reg = "PCC" then v else s.bitvector_129_dec_reg reg) |>));
  of_regval = (fun v -> bitvector_129_dec_of_regval v);
  regval_of = (fun v -> regval_of_bitvector_129_dec v) |>

let SEE_ref  : register_ref regstate register_value (ii) = <|
  name = "SEE";
  read_from = (fun s -> s.int_reg "SEE");
  write_to = (fun v s -> (<| s with int_reg = (fun reg -> if reg = "SEE" then v else s.int_reg reg) |>));
  of_regval = (fun v -> int_of_register_value v);
  regval_of = (fun v -> register_value_of_int v) |>

val registers : list (string * register_ops regstate register_value)
let registers = [
    ("__highest_el_aarch32", register_ops_of __highest_el_aarch32_ref);
    ("__ThisInstrAbstract", register_ops_of __ThisInstrAbstract_ref);
    ("__ThisInstrEnc", register_ops_of __ThisInstrEnc_ref);
    ("__CNTControlBase", register_ops_of __CNTControlBase_ref);
    ("EventRegister", register_ops_of EventRegister_ref);
    ("__saved_exception_level", register_ops_of __saved_exception_level_ref);
    ("SP_EL3", register_ops_of SP_EL3_ref);
    ("_V", register_ops_of _V_ref);
    ("PMSWINC_EL0", register_ops_of PMSWINC_EL0_ref);
    ("OSLAR_EL1", register_ops_of OSLAR_EL1_ref);
    ("ICC_SGI1R_EL1", register_ops_of ICC_SGI1R_EL1_ref);
    ("ICC_SGI0R_EL1", register_ops_of ICC_SGI0R_EL1_ref);
    ("ICV_EOIR1_EL1", register_ops_of ICV_EOIR1_EL1_ref);
    ("ICC_EOIR1_EL1", register_ops_of ICC_EOIR1_EL1_ref);
    ("ICV_EOIR0_EL1", register_ops_of ICV_EOIR0_EL1_ref);
    ("ICC_EOIR0_EL1", register_ops_of ICC_EOIR0_EL1_ref);
    ("ICV_DIR_EL1", register_ops_of ICV_DIR_EL1_ref);
    ("ICC_DIR_EL1", register_ops_of ICC_DIR_EL1_ref);
    ("ICC_ASGI1R_EL1", register_ops_of ICC_ASGI1R_EL1_ref);
    ("DBGDTRTX_EL0", register_ops_of DBGDTRTX_EL0_ref);
    ("RDDC_EL0", register_ops_of RDDC_EL0_ref);
    ("DDC_EL3", register_ops_of DDC_EL3_ref);
    ("DDC_EL2", register_ops_of DDC_EL2_ref);
    ("DDC_EL1", register_ops_of DDC_EL1_ref);
    ("DDC_EL0", register_ops_of DDC_EL0_ref);
    ("VTTBR_EL2", register_ops_of VTTBR_EL2_ref);
    ("VTCR_EL2", register_ops_of VTCR_EL2_ref);
    ("VSESR_EL2", register_ops_of VSESR_EL2_ref);
    ("TTBR1_EL2", register_ops_of TTBR1_EL2_ref);
    ("TTBR1_EL1", register_ops_of TTBR1_EL1_ref);
    ("TTBR0_EL3", register_ops_of TTBR0_EL3_ref);
    ("TTBR0_EL2", register_ops_of TTBR0_EL2_ref);
    ("TTBR0_EL1", register_ops_of TTBR0_EL1_ref);
    ("TPIDR_EL3", register_ops_of TPIDR_EL3_ref);
    ("TPIDR_EL2", register_ops_of TPIDR_EL2_ref);
    ("TPIDR_EL1", register_ops_of TPIDR_EL1_ref);
    ("TPIDR_EL0", register_ops_of TPIDR_EL0_ref);
    ("TPIDRRO_EL0", register_ops_of TPIDRRO_EL0_ref);
    ("SP_EL2", register_ops_of SP_EL2_ref);
    ("SP_EL1", register_ops_of SP_EL1_ref);
    ("SP_EL0", register_ops_of SP_EL0_ref);
    ("SPSR_und", register_ops_of SPSR_und_ref);
    ("SPSR_irq", register_ops_of SPSR_irq_ref);
    ("SPSR_fiq", register_ops_of SPSR_fiq_ref);
    ("SPSR_abt", register_ops_of SPSR_abt_ref);
    ("SDER32_EL3", register_ops_of SDER32_EL3_ref);
    ("SCXTNUM_EL3", register_ops_of SCXTNUM_EL3_ref);
    ("SCXTNUM_EL2", register_ops_of SCXTNUM_EL2_ref);
    ("SCXTNUM_EL1", register_ops_of SCXTNUM_EL1_ref);
    ("CID_EL0", register_ops_of CID_EL0_ref);
    ("S3_op1_Cn_Cm_op2", register_ops_of S3_op1_Cn_Cm_op2_ref);
    ("RVBAR_EL3", register_ops_of RVBAR_EL3_ref);
    ("RVBAR_EL2", register_ops_of RVBAR_EL2_ref);
    ("RVBAR_EL1", register_ops_of RVBAR_EL1_ref);
    ("RTPIDR_EL0", register_ops_of RTPIDR_EL0_ref);
    ("RSP_EL0", register_ops_of RSP_EL0_ref);
    ("RMR_EL3", register_ops_of RMR_EL3_ref);
    ("RMR_EL2", register_ops_of RMR_EL2_ref);
    ("RMR_EL1", register_ops_of RMR_EL1_ref);
    ("REVIDR_EL1", register_ops_of REVIDR_EL1_ref);
    ("PMXEVTYPER_EL0", register_ops_of PMXEVTYPER_EL0_ref);
    ("PMXEVCNTR_EL0", register_ops_of PMXEVCNTR_EL0_ref);
    ("PMSLATFR_EL1", register_ops_of PMSLATFR_EL1_ref);
    ("PMSIRR_EL1", register_ops_of PMSIRR_EL1_ref);
    ("PMSIDR_EL1", register_ops_of PMSIDR_EL1_ref);
    ("PMSICR_EL1", register_ops_of PMSICR_EL1_ref);
    ("PMSFCR_EL1", register_ops_of PMSFCR_EL1_ref);
    ("PMSEVFR_EL1", register_ops_of PMSEVFR_EL1_ref);
    ("PMSELR_EL0", register_ops_of PMSELR_EL0_ref);
    ("PMSCR_EL2", register_ops_of PMSCR_EL2_ref);
    ("PMSCR_EL1", register_ops_of PMSCR_EL1_ref);
    ("PMOVSSET_EL0", register_ops_of PMOVSSET_EL0_ref);
    ("PMOVSCLR_EL0", register_ops_of PMOVSCLR_EL0_ref);
    ("PMINTENSET_EL1", register_ops_of PMINTENSET_EL1_ref);
    ("PMINTENCLR_EL1", register_ops_of PMINTENCLR_EL1_ref);
    ("PMEVTYPER_EL0", register_ops_of PMEVTYPER_EL0_ref);
    ("PMEVCNTR_EL0", register_ops_of PMEVCNTR_EL0_ref);
    ("PMCR_EL0", register_ops_of PMCR_EL0_ref);
    ("PMCNTENSET_EL0", register_ops_of PMCNTENSET_EL0_ref);
    ("PMCNTENCLR_EL0", register_ops_of PMCNTENCLR_EL0_ref);
    ("PMCEID1_EL0", register_ops_of PMCEID1_EL0_ref);
    ("PMCEID0_EL0", register_ops_of PMCEID0_EL0_ref);
    ("PMCCNTR_EL0", register_ops_of PMCCNTR_EL0_ref);
    ("PMUSERENR_EL0", register_ops_of PMUSERENR_EL0_ref);
    ("PMCCFILTR_EL0", register_ops_of PMCCFILTR_EL0_ref);
    ("PMBSR_EL1", register_ops_of PMBSR_EL1_ref);
    ("PMBPTR_EL1", register_ops_of PMBPTR_EL1_ref);
    ("PMBLIMITR_EL1", register_ops_of PMBLIMITR_EL1_ref);
    ("PMBIDR_EL1", register_ops_of PMBIDR_EL1_ref);
    ("PAR_EL1", register_ops_of PAR_EL1_ref);
    ("OSECCR_EL1", register_ops_of OSECCR_EL1_ref);
    ("OSDTRTX_EL1", register_ops_of OSDTRTX_EL1_ref);
    ("OSDTRRX_EL1", register_ops_of OSDTRRX_EL1_ref);
    ("MVFR2_EL1", register_ops_of MVFR2_EL1_ref);
    ("MVFR1_EL1", register_ops_of MVFR1_EL1_ref);
    ("MVFR0_EL1", register_ops_of MVFR0_EL1_ref);
    ("VMPIDR_EL2", register_ops_of VMPIDR_EL2_ref);
    ("MPIDR_EL1", register_ops_of MPIDR_EL1_ref);
    ("MPAMVPMV_EL2", register_ops_of MPAMVPMV_EL2_ref);
    ("MPAMVPM7_EL2", register_ops_of MPAMVPM7_EL2_ref);
    ("MPAMVPM6_EL2", register_ops_of MPAMVPM6_EL2_ref);
    ("MPAMVPM5_EL2", register_ops_of MPAMVPM5_EL2_ref);
    ("MPAMVPM4_EL2", register_ops_of MPAMVPM4_EL2_ref);
    ("MPAMVPM3_EL2", register_ops_of MPAMVPM3_EL2_ref);
    ("MPAMVPM2_EL2", register_ops_of MPAMVPM2_EL2_ref);
    ("MPAMVPM1_EL2", register_ops_of MPAMVPM1_EL2_ref);
    ("MPAMVPM0_EL2", register_ops_of MPAMVPM0_EL2_ref);
    ("MPAMIDR_EL1", register_ops_of MPAMIDR_EL1_ref);
    ("MPAMHCR_EL2", register_ops_of MPAMHCR_EL2_ref);
    ("_MPAM1_EL1_0_62", register_ops_of _MPAM1_EL1_0_62_ref);
    ("_MPAM2_EL2_0_62", register_ops_of _MPAM2_EL2_0_62_ref);
    ("MPAM3_EL3", register_ops_of MPAM3_EL3_ref);
    ("MPAM0_EL1", register_ops_of MPAM0_EL1_ref);
    ("VPIDR_EL2", register_ops_of VPIDR_EL2_ref);
    ("MIDR_EL1", register_ops_of MIDR_EL1_ref);
    ("MDRAR_EL1", register_ops_of MDRAR_EL1_ref);
    ("MDCCSR_EL0", register_ops_of MDCCSR_EL0_ref);
    ("MDCCINT_EL1", register_ops_of MDCCINT_EL1_ref);
    ("MAIR_EL3", register_ops_of MAIR_EL3_ref);
    ("MAIR_EL2", register_ops_of MAIR_EL2_ref);
    ("MAIR_EL1", register_ops_of MAIR_EL1_ref);
    ("LORSA_EL1", register_ops_of LORSA_EL1_ref);
    ("LORN_EL1", register_ops_of LORN_EL1_ref);
    ("LORID_EL1", register_ops_of LORID_EL1_ref);
    ("LOREA_EL1", register_ops_of LOREA_EL1_ref);
    ("LORC_EL1", register_ops_of LORC_EL1_ref);
    ("ISR_EL1", register_ops_of ISR_EL1_ref);
    ("IFSR32_EL2", register_ops_of IFSR32_EL2_ref);
    ("ID_PFR2_EL1", register_ops_of ID_PFR2_EL1_ref);
    ("ID_PFR1_EL1", register_ops_of ID_PFR1_EL1_ref);
    ("ID_PFR0_EL1", register_ops_of ID_PFR0_EL1_ref);
    ("ID_MMFR5_EL1", register_ops_of ID_MMFR5_EL1_ref);
    ("ID_MMFR4_EL1", register_ops_of ID_MMFR4_EL1_ref);
    ("ID_MMFR3_EL1", register_ops_of ID_MMFR3_EL1_ref);
    ("ID_MMFR2_EL1", register_ops_of ID_MMFR2_EL1_ref);
    ("ID_MMFR1_EL1", register_ops_of ID_MMFR1_EL1_ref);
    ("ID_MMFR0_EL1", register_ops_of ID_MMFR0_EL1_ref);
    ("ID_ISAR6_EL1", register_ops_of ID_ISAR6_EL1_ref);
    ("ID_ISAR5_EL1", register_ops_of ID_ISAR5_EL1_ref);
    ("ID_ISAR4_EL1", register_ops_of ID_ISAR4_EL1_ref);
    ("ID_ISAR3_EL1", register_ops_of ID_ISAR3_EL1_ref);
    ("ID_ISAR2_EL1", register_ops_of ID_ISAR2_EL1_ref);
    ("ID_ISAR1_EL1", register_ops_of ID_ISAR1_EL1_ref);
    ("ID_ISAR0_EL1", register_ops_of ID_ISAR0_EL1_ref);
    ("ID_DFR0_EL1", register_ops_of ID_DFR0_EL1_ref);
    ("ID_AFR0_EL1", register_ops_of ID_AFR0_EL1_ref);
    ("ID_AA64ZFR0_EL1", register_ops_of ID_AA64ZFR0_EL1_ref);
    ("ID_AA64PFR1_EL1", register_ops_of ID_AA64PFR1_EL1_ref);
    ("ID_AA64PFR0_EL1", register_ops_of ID_AA64PFR0_EL1_ref);
    ("ID_AA64MMFR2_EL1", register_ops_of ID_AA64MMFR2_EL1_ref);
    ("ID_AA64MMFR1_EL1", register_ops_of ID_AA64MMFR1_EL1_ref);
    ("ID_AA64MMFR0_EL1", register_ops_of ID_AA64MMFR0_EL1_ref);
    ("ID_AA64ISAR1_EL1", register_ops_of ID_AA64ISAR1_EL1_ref);
    ("ID_AA64ISAR0_EL1", register_ops_of ID_AA64ISAR0_EL1_ref);
    ("ID_AA64DFR1_EL1", register_ops_of ID_AA64DFR1_EL1_ref);
    ("ID_AA64DFR0_EL1", register_ops_of ID_AA64DFR0_EL1_ref);
    ("ID_AA64AFR1_EL1", register_ops_of ID_AA64AFR1_EL1_ref);
    ("ID_AA64AFR0_EL1", register_ops_of ID_AA64AFR0_EL1_ref);
    ("ICH_VTR_EL2", register_ops_of ICH_VTR_EL2_ref);
    ("ICH_VMCR_EL2", register_ops_of ICH_VMCR_EL2_ref);
    ("ICH_MISR_EL2", register_ops_of ICH_MISR_EL2_ref);
    ("ICH_LR_EL2", register_ops_of ICH_LR_EL2_ref);
    ("ICH_ELRSR_EL2", register_ops_of ICH_ELRSR_EL2_ref);
    ("ICH_EISR_EL2", register_ops_of ICH_EISR_EL2_ref);
    ("ICH_AP1R_EL2", register_ops_of ICH_AP1R_EL2_ref);
    ("ICH_AP0R_EL2", register_ops_of ICH_AP0R_EL2_ref);
    ("ICV_RPR_EL1", register_ops_of ICV_RPR_EL1_ref);
    ("ICC_RPR_EL1", register_ops_of ICC_RPR_EL1_ref);
    ("ICV_PMR_EL1", register_ops_of ICV_PMR_EL1_ref);
    ("ICC_PMR_EL1", register_ops_of ICC_PMR_EL1_ref);
    ("ICC_IGRPEN1_EL3", register_ops_of ICC_IGRPEN1_EL3_ref);
    ("ICV_IGRPEN1_EL1", register_ops_of ICV_IGRPEN1_EL1_ref);
    ("ICC_IGRPEN1_EL1_S", register_ops_of ICC_IGRPEN1_EL1_S_ref);
    ("ICC_IGRPEN1_EL1_NS", register_ops_of ICC_IGRPEN1_EL1_NS_ref);
    ("ICV_IGRPEN0_EL1", register_ops_of ICV_IGRPEN0_EL1_ref);
    ("ICC_IGRPEN0_EL1", register_ops_of ICC_IGRPEN0_EL1_ref);
    ("ICV_IAR1_EL1", register_ops_of ICV_IAR1_EL1_ref);
    ("ICC_IAR1_EL1", register_ops_of ICC_IAR1_EL1_ref);
    ("ICV_IAR0_EL1", register_ops_of ICV_IAR0_EL1_ref);
    ("ICC_IAR0_EL1", register_ops_of ICC_IAR0_EL1_ref);
    ("ICV_HPPIR1_EL1", register_ops_of ICV_HPPIR1_EL1_ref);
    ("ICC_HPPIR1_EL1", register_ops_of ICC_HPPIR1_EL1_ref);
    ("ICV_HPPIR0_EL1", register_ops_of ICV_HPPIR0_EL1_ref);
    ("ICC_HPPIR0_EL1", register_ops_of ICC_HPPIR0_EL1_ref);
    ("ICC_CTLR_EL3", register_ops_of ICC_CTLR_EL3_ref);
    ("ICV_CTLR_EL1", register_ops_of ICV_CTLR_EL1_ref);
    ("ICC_CTLR_EL1_S", register_ops_of ICC_CTLR_EL1_S_ref);
    ("ICC_CTLR_EL1_NS", register_ops_of ICC_CTLR_EL1_NS_ref);
    ("ICV_BPR1_EL1", register_ops_of ICV_BPR1_EL1_ref);
    ("ICC_BPR1_EL1_S", register_ops_of ICC_BPR1_EL1_S_ref);
    ("ICC_BPR1_EL1_NS", register_ops_of ICC_BPR1_EL1_NS_ref);
    ("ICV_BPR0_EL1", register_ops_of ICV_BPR0_EL1_ref);
    ("ICC_BPR0_EL1", register_ops_of ICC_BPR0_EL1_ref);
    ("ICV_AP1R_EL1", register_ops_of ICV_AP1R_EL1_ref);
    ("ICC_AP1R_EL1_S", register_ops_of ICC_AP1R_EL1_S_ref);
    ("ICC_AP1R_EL1_NS", register_ops_of ICC_AP1R_EL1_NS_ref);
    ("ICC_AP1R_EL1", register_ops_of ICC_AP1R_EL1_ref);
    ("ICV_AP0R_EL1", register_ops_of ICV_AP0R_EL1_ref);
    ("ICH_HCR_EL2", register_ops_of ICH_HCR_EL2_ref);
    ("ICC_SRE_EL3", register_ops_of ICC_SRE_EL3_ref);
    ("ICC_SRE_EL2", register_ops_of ICC_SRE_EL2_ref);
    ("ICC_SRE_EL1_S", register_ops_of ICC_SRE_EL1_S_ref);
    ("ICC_SRE_EL1_NS", register_ops_of ICC_SRE_EL1_NS_ref);
    ("ICC_AP0R_EL1", register_ops_of ICC_AP0R_EL1_ref);
    ("HSTR_EL2", register_ops_of HSTR_EL2_ref);
    ("HACR_EL2", register_ops_of HACR_EL2_ref);
    ("FPSR", register_ops_of FPSR_ref);
    ("FPEXC32_EL2", register_ops_of FPEXC32_EL2_ref);
    ("FPCR", register_ops_of FPCR_ref);
    ("ERXSTATUS_EL1", register_ops_of ERXSTATUS_EL1_ref);
    ("ERXMISC1_EL1", register_ops_of ERXMISC1_EL1_ref);
    ("ERXMISC0_EL1", register_ops_of ERXMISC0_EL1_ref);
    ("ERXFR_EL1", register_ops_of ERXFR_EL1_ref);
    ("ERXCTLR_EL1", register_ops_of ERXCTLR_EL1_ref);
    ("ERXADDR_EL1", register_ops_of ERXADDR_EL1_ref);
    ("ERRSELR_EL1", register_ops_of ERRSELR_EL1_ref);
    ("ERRIDR_EL1", register_ops_of ERRIDR_EL1_ref);
    ("VDISR_EL2", register_ops_of VDISR_EL2_ref);
    ("DISR_EL1", register_ops_of DISR_EL1_ref);
    ("DCZID_EL0", register_ops_of DCZID_EL0_ref);
    ("DBGWVR_EL1", register_ops_of DBGWVR_EL1_ref);
    ("DBGWCR_EL1", register_ops_of DBGWCR_EL1_ref);
    ("DBGVCR32_EL2", register_ops_of DBGVCR32_EL2_ref);
    ("CDBGDTR_EL0", register_ops_of CDBGDTR_EL0_ref);
    ("MDSCR_EL1", register_ops_of MDSCR_EL1_ref);
    ("DBGDTRRX_EL0", register_ops_of DBGDTRRX_EL0_ref);
    ("DBGCLAIMSET_EL1", register_ops_of DBGCLAIMSET_EL1_ref);
    ("DBGCLAIMCLR_EL1", register_ops_of DBGCLAIMCLR_EL1_ref);
    ("DBGBVR_EL1", register_ops_of DBGBVR_EL1_ref);
    ("OSLSR_EL1", register_ops_of OSLSR_EL1_ref);
    ("OSDLR_EL1", register_ops_of OSDLR_EL1_ref);
    ("DBGPRCR_EL1", register_ops_of DBGPRCR_EL1_ref);
    ("SPIDEN", register_ops_of SPIDEN_ref);
    ("DBGEN", register_ops_of DBGEN_ref);
    ("DSPSR_EL0", register_ops_of DSPSR_EL0_ref);
    ("CDLR_EL0", register_ops_of CDLR_EL0_ref);
    ("DBGBCR_EL1", register_ops_of DBGBCR_EL1_ref);
    ("MDCR_EL3", register_ops_of MDCR_EL3_ref);
    ("MDCR_EL2", register_ops_of MDCR_EL2_ref);
    ("DBGAUTHSTATUS_EL1", register_ops_of DBGAUTHSTATUS_EL1_ref);
    ("DACR32_EL2", register_ops_of DACR32_EL2_ref);
    ("CTR_EL0", register_ops_of CTR_EL0_ref);
    ("CSSELR_EL1", register_ops_of CSSELR_EL1_ref);
    ("CSCR_EL3", register_ops_of CSCR_EL3_ref);
    ("CONTEXTIDR_EL2", register_ops_of CONTEXTIDR_EL2_ref);
    ("CONTEXTIDR_EL1", register_ops_of CONTEXTIDR_EL1_ref);
    ("CNTV_TVAL_EL0", register_ops_of CNTV_TVAL_EL0_ref);
    ("CNTV_CVAL_EL0", register_ops_of CNTV_CVAL_EL0_ref);
    ("CNTV_CTL_EL0", register_ops_of CNTV_CTL_EL0_ref);
    ("CNTVOFF_EL2", register_ops_of CNTVOFF_EL2_ref);
    ("CNTVCT_EL0", register_ops_of CNTVCT_EL0_ref);
    ("CNTP_TVAL_EL0", register_ops_of CNTP_TVAL_EL0_ref);
    ("CNTP_CVAL_EL0", register_ops_of CNTP_CVAL_EL0_ref);
    ("CNTP_CTL_EL0", register_ops_of CNTP_CTL_EL0_ref);
    ("CNTPS_TVAL_EL1", register_ops_of CNTPS_TVAL_EL1_ref);
    ("CNTPS_CVAL_EL1", register_ops_of CNTPS_CVAL_EL1_ref);
    ("CNTPS_CTL_EL1", register_ops_of CNTPS_CTL_EL1_ref);
    ("CNTPCT_EL0", register_ops_of CNTPCT_EL0_ref);
    ("CNTHV_TVAL_EL2", register_ops_of CNTHV_TVAL_EL2_ref);
    ("CNTHV_CVAL_EL2", register_ops_of CNTHV_CVAL_EL2_ref);
    ("CNTHV_CTL_EL2", register_ops_of CNTHV_CTL_EL2_ref);
    ("CNTHP_TVAL_EL2", register_ops_of CNTHP_TVAL_EL2_ref);
    ("CNTHP_CVAL_EL2", register_ops_of CNTHP_CVAL_EL2_ref);
    ("CNTHP_CTL_EL2", register_ops_of CNTHP_CTL_EL2_ref);
    ("CNTKCTL_EL1", register_ops_of CNTKCTL_EL1_ref);
    ("CNTHCTL_EL2", register_ops_of CNTHCTL_EL2_ref);
    ("CNTFRQ_EL0", register_ops_of CNTFRQ_EL0_ref);
    ("CLIDR_EL1", register_ops_of CLIDR_EL1_ref);
    ("CHCR_EL2", register_ops_of CHCR_EL2_ref);
    ("CCSIDR_EL1", register_ops_of CCSIDR_EL1_ref);
    ("AMAIR_EL3", register_ops_of AMAIR_EL3_ref);
    ("AMAIR_EL2", register_ops_of AMAIR_EL2_ref);
    ("AMAIR_EL1", register_ops_of AMAIR_EL1_ref);
    ("AIDR_EL1", register_ops_of AIDR_EL1_ref);
    ("AFSR1_EL3", register_ops_of AFSR1_EL3_ref);
    ("AFSR1_EL2", register_ops_of AFSR1_EL2_ref);
    ("AFSR1_EL1", register_ops_of AFSR1_EL1_ref);
    ("AFSR0_EL3", register_ops_of AFSR0_EL3_ref);
    ("AFSR0_EL2", register_ops_of AFSR0_EL2_ref);
    ("AFSR0_EL1", register_ops_of AFSR0_EL1_ref);
    ("ACTLR_EL3", register_ops_of ACTLR_EL3_ref);
    ("ACTLR_EL2", register_ops_of ACTLR_EL2_ref);
    ("ACTLR_EL1", register_ops_of ACTLR_EL1_ref);
    ("SPSR_EL3", register_ops_of SPSR_EL3_ref);
    ("SPSR_EL2", register_ops_of SPSR_EL2_ref);
    ("SPSR_EL1", register_ops_of SPSR_EL1_ref);
    ("SCTLR_EL3", register_ops_of SCTLR_EL3_ref);
    ("SCTLR_EL2", register_ops_of SCTLR_EL2_ref);
    ("SCTLR_EL1", register_ops_of SCTLR_EL1_ref);
    ("EDSCR", register_ops_of EDSCR_ref);
    ("CPTR_EL3", register_ops_of CPTR_EL3_ref);
    ("CPTR_EL2", register_ops_of CPTR_EL2_ref);
    ("CPACR_EL1", register_ops_of CPACR_EL1_ref);
    ("VBAR_EL3", register_ops_of VBAR_EL3_ref);
    ("VBAR_EL2", register_ops_of VBAR_EL2_ref);
    ("VBAR_EL1", register_ops_of VBAR_EL1_ref);
    ("ELR_EL3", register_ops_of ELR_EL3_ref);
    ("ELR_EL2", register_ops_of ELR_EL2_ref);
    ("ELR_EL1", register_ops_of ELR_EL1_ref);
    ("CCTLR_EL3", register_ops_of CCTLR_EL3_ref);
    ("CCTLR_EL2", register_ops_of CCTLR_EL2_ref);
    ("CCTLR_EL1", register_ops_of CCTLR_EL1_ref);
    ("CCTLR_EL0", register_ops_of CCTLR_EL0_ref);
    ("__BranchTaken", register_ops_of __BranchTaken_ref);
    ("_PC", register_ops_of _PC_ref);
    ("TCR_EL3", register_ops_of TCR_EL3_ref);
    ("TCR_EL2", register_ops_of TCR_EL2_ref);
    ("TCR_EL1", register_ops_of TCR_EL1_ref);
    ("HPFAR_EL2", register_ops_of HPFAR_EL2_ref);
    ("FAR_EL3", register_ops_of FAR_EL3_ref);
    ("FAR_EL2", register_ops_of FAR_EL2_ref);
    ("FAR_EL1", register_ops_of FAR_EL1_ref);
    ("ESR_EL3", register_ops_of ESR_EL3_ref);
    ("ESR_EL2", register_ops_of ESR_EL2_ref);
    ("ESR_EL1", register_ops_of ESR_EL1_ref);
    ("_R30", register_ops_of _R30_ref);
    ("_R29", register_ops_of _R29_ref);
    ("_R28", register_ops_of _R28_ref);
    ("_R27", register_ops_of _R27_ref);
    ("_R26", register_ops_of _R26_ref);
    ("_R25", register_ops_of _R25_ref);
    ("_R24", register_ops_of _R24_ref);
    ("_R23", register_ops_of _R23_ref);
    ("_R22", register_ops_of _R22_ref);
    ("_R21", register_ops_of _R21_ref);
    ("_R20", register_ops_of _R20_ref);
    ("_R19", register_ops_of _R19_ref);
    ("_R18", register_ops_of _R18_ref);
    ("_R17", register_ops_of _R17_ref);
    ("_R16", register_ops_of _R16_ref);
    ("_R15", register_ops_of _R15_ref);
    ("_R14", register_ops_of _R14_ref);
    ("_R13", register_ops_of _R13_ref);
    ("_R12", register_ops_of _R12_ref);
    ("_R11", register_ops_of _R11_ref);
    ("_R10", register_ops_of _R10_ref);
    ("_R09", register_ops_of _R09_ref);
    ("_R08", register_ops_of _R08_ref);
    ("_R07", register_ops_of _R07_ref);
    ("_R06", register_ops_of _R06_ref);
    ("_R05", register_ops_of _R05_ref);
    ("_R04", register_ops_of _R04_ref);
    ("_R03", register_ops_of _R03_ref);
    ("_R02", register_ops_of _R02_ref);
    ("_R01", register_ops_of _R01_ref);
    ("_R00", register_ops_of _R00_ref);
    ("__ThisInstr", register_ops_of __ThisInstr_ref);
    ("PSTATE", register_ops_of PSTATE_ref);
    ("HCR_EL2", register_ops_of HCR_EL2_ref);
    ("SCR_EL3", register_ops_of SCR_EL3_ref);
    ("CNTHVS_TVAL_EL2", register_ops_of CNTHVS_TVAL_EL2_ref);
    ("CNTHVS_CVAL_EL2", register_ops_of CNTHVS_CVAL_EL2_ref);
    ("CNTHVS_CTL_EL2", register_ops_of CNTHVS_CTL_EL2_ref);
    ("CNTHPS_TVAL_EL2", register_ops_of CNTHPS_TVAL_EL2_ref);
    ("CNTHPS_CVAL_EL2", register_ops_of CNTHPS_CVAL_EL2_ref);
    ("CNTHPS_CTL_EL2", register_ops_of CNTHPS_CTL_EL2_ref);
    ("PCC", register_ops_of PCC_ref);
    ("SEE", register_ops_of SEE_ref)
  ]

let register_accessors = mk_accessors (fun nm -> List.lookup nm registers)

val get_regval : string -> regstate -> maybe register_value
let get_regval = fst register_accessors

val set_regval : string -> register_value -> regstate -> maybe regstate
let set_regval = snd register_accessors


type MR 'a 'r = base_monadR register_value regstate 'a 'r exception
type M 'a = base_monad register_value regstate 'a exception
